/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Refit;
using Itofinity.Bitbucket.Rest.Client;
using Itofinity.Bitbucket.Rest.Model;

namespace Itofinity.Bitbucket.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPullrequestsApi
    {
        #region Asynchronous Operations

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all pull requests authored by the specified user.  By default only open pull requests are returned. This can be controlled using the &#x60;state&#x60; query parameter. To retrieve pull requests that are in one of multiple states, repeat the &#x60;state&#x60; parameter for each individual state.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](../../../../meta/filtering) for more details.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target_user"></param>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="state">Only return pull requests that are in this state. This parameter can be repeated. (optional)</param>
        /// <returns>Task of PaginatedPullrequests</returns>
        [Get("/pullrequests/{target_user}")]
        System.Threading.Tasks.Task<PaginatedPullrequests> PullrequestsTargetUserGet([Header("UserAgent")] string userAgent, [AliasAs("target_user")]string target_user, [AliasAs("username")]string username, [AliasAs("state")]string state = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the repository&#39;s default reviewers.  These are the users that are automatically added as reviewers on every new pull request that is created.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of void</returns>
        [Get("/repositories/{username}/{repo_slug}/default-reviewers")]
        System.Threading.Tasks.Task RepositoriesUsernameRepoSlugDefaultReviewersGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a default reviewer from the repository.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="target_username">This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. </param>
        /// <returns>Task of Error</returns>
        [Delete("/repositories/{username}/{repo_slug}/default-reviewers/{target_username}")]
        System.Threading.Tasks.Task<Error> RepositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDelete([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("target_username")]string target_username);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the specified reviewer.  This can be used to test whether a user is among the repository&#39;s default reviewers list. A 404 indicates that that specified user is not a default reviewer.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="target_username">This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. </param>
        /// <returns>Task of Error</returns>
        [Get("/repositories/{username}/{repo_slug}/default-reviewers/{target_username}")]
        System.Threading.Tasks.Task<Error> RepositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("target_username")]string target_username);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds the specified user to the repository&#39;s list of default reviewers.  This method is idempotent. Adding a user a second time has no effect.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="target_username">This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. </param>
        /// <returns>Task of Error</returns>
        [Put("/repositories/{username}/{repo_slug}/default-reviewers/{target_username}")]
        System.Threading.Tasks.Task<Error> RepositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePut([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("target_username")]string target_username);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of the pull request&#39;s activity log.  This includes comments that were made by the reviewers, updates and approvals.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="pull_request_id">The id of the pull request.</param>
        /// <returns>Task of void</returns>
        [Get("/repositories/{username}/{repo_slug}/pullrequests/activity")]
        System.Threading.Tasks.Task RepositoriesUsernameRepoSlugPullrequestsActivityGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("pull_request_id")]int? pull_request_id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all pull requests on the specified repository.  By default only open pull requests are returned. This can be controlled using the &#x60;state&#x60; query parameter. To retrieve pull requests that are in one of multiple states, repeat the &#x60;state&#x60; parameter for each individual state.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](../../../../meta/filtering) for more details.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="state">Only return pull requests that are in this state. This parameter can be repeated. (optional)</param>
        /// <returns>Task of PaginatedPullrequests</returns>
        [Get("/repositories/{username}/{repo_slug}/pullrequests")]
        System.Threading.Tasks.Task<PaginatedPullrequests> RepositoriesUsernameRepoSlugPullrequestsGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("state")]string state = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new pull request where the destination repository is this repository and the author is the authenticated user.  The minimum required fields to create a pull request are &#x60;title&#x60; and &#x60;source&#x60;, specified by a branch name.  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/repositories/my-username/my-repository/pullrequests \\     -u my-username:my-password \\     - -request POST \\     - -header &#39;Content-Type: application/json&#39; \\     - -data &#39;{         \&quot;title\&quot;: \&quot;My Title\&quot;,         \&quot;source\&quot;: {             \&quot;branch\&quot;: {                 \&quot;name\&quot;: \&quot;staging\&quot;             }         }     }&#39; &#x60;&#x60;&#x60;  If the pull request&#39;s &#x60;destination&#x60; is not specified, it will default to the &#x60;repository.mainbranch&#x60;. To open a pull request to a different branch, say from a feature branch to a staging branch, specify a &#x60;destination&#x60; (same format as the &#x60;source&#x60;):  &#x60;&#x60;&#x60; {     \&quot;title\&quot;: \&quot;My Title\&quot;,     \&quot;source\&quot;: {         \&quot;branch\&quot;: {             \&quot;name\&quot;: \&quot;my-feature-branch\&quot;         }     },     \&quot;destination\&quot;: {         \&quot;branch\&quot;: {             \&quot;name\&quot;: \&quot;staging\&quot;         }     } } &#x60;&#x60;&#x60;  Reviewers can be specified by adding an array of user objects as the &#x60;reviewers&#x60; property.  &#x60;&#x60;&#x60; {     \&quot;title\&quot;: \&quot;My Title\&quot;,     \&quot;source\&quot;: {         \&quot;branch\&quot;: {             \&quot;name\&quot;: \&quot;my-feature-branch\&quot;         }     },     \&quot;reviewers\&quot;: [         {             \&quot;uuid\&quot;: \&quot;{504c3b62-8120-4f0c-a7bc-87800b9d6f70}\&quot;         }     ] } &#x60;&#x60;&#x60;  Other fields:  * &#x60;description&#x60; - a string * &#x60;close_source_branch&#x60; - boolean that specifies if the source branch should be closed upon merging
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="_body">The new pull request.  The request URL you POST to becomes the destination repository URL. For this reason, you must specify an explicit source repository in the request object if you want to pull from a different repository (fork).  Since not all elements are required or even mutable, you only need to include the elements you want to initialize, such as the source branch and the title. (optional)</param>
        /// <returns>Task of Pullrequest</returns>
        [Post("/repositories/{username}/{repo_slug}/pullrequests")]
        System.Threading.Tasks.Task<Pullrequest> RepositoriesUsernameRepoSlugPullrequestsPost([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [Body]Pullrequest _body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of the pull request&#39;s activity log.  This includes comments that were made by the reviewers, updates and approvals.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="pull_request_id">The id of the pull request.</param>
        /// <returns>Task of void</returns>
        [Get("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/activity")]
        System.Threading.Tasks.Task RepositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("pull_request_id")]int? pull_request_id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Redact the authenticated user&#39;s approval of the specified pull request.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="pull_request_id"></param>
        /// <param name="repo_slug"></param>
        /// <returns>Task of void</returns>
        [Delete("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/approve")]
        System.Threading.Tasks.Task RepositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDelete([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("pull_request_id")]string pull_request_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve the specified pull request as the authenticated user.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="pull_request_id"></param>
        /// <param name="repo_slug"></param>
        /// <returns>Task of Participant</returns>
        [Post("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/approve")]
        System.Threading.Tasks.Task<Participant> RepositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePost([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("pull_request_id")]string pull_request_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a specific pull request comment.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="pull_request_id"></param>
        /// <param name="comment_id"></param>
        /// <param name="repo_slug"></param>
        /// <returns>Task of void</returns>
        [Delete("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}")]
        System.Threading.Tasks.Task RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("pull_request_id")]string pull_request_id, [AliasAs("comment_id")]string comment_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific pull request comment.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="pull_request_id"></param>
        /// <param name="comment_id"></param>
        /// <param name="repo_slug"></param>
        /// <returns>Task of PullrequestComment</returns>
        [Get("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}")]
        System.Threading.Tasks.Task<PullrequestComment> RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("pull_request_id")]string pull_request_id, [AliasAs("comment_id")]string comment_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a specific pull request comment.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="pull_request_id"></param>
        /// <param name="comment_id"></param>
        /// <param name="repo_slug"></param>
        /// <param name="_body">The contents of the updated comment.</param>
        /// <returns>Task of PullrequestComment</returns>
        [Put("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}")]
        System.Threading.Tasks.Task<PullrequestComment> RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("pull_request_id")]string pull_request_id, [AliasAs("comment_id")]string comment_id, [AliasAs("repo_slug")]string repo_slug, [Body]PullrequestComment _body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of the pull request&#39;s comments.  This includes both global, inline comments and replies.  The default sorting is oldest to newest and can be overridden with the &#x60;sort&#x60; query parameter.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](../../../../../../meta/filtering) for more details.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="pull_request_id">The id of the pull request.</param>
        /// <returns>Task of PaginatedPullrequestComments</returns>
        [Get("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments")]
        System.Threading.Tasks.Task<PaginatedPullrequestComments> RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("pull_request_id")]int? pull_request_id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new pull request comment.  Returns the newly created pull request comment.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="pull_request_id">The id of the pull request.</param>
        /// <param name="_body">The comment object.</param>
        /// <returns>Task of PullrequestComment</returns>
        [Post("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments")]
        System.Threading.Tasks.Task<PullrequestComment> RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsPost([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("pull_request_id")]int? pull_request_id, [Body]PullrequestComment _body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of the pull request&#39;s commits.  These are the commits that are being merged into the destination branch when the pull requests gets accepted.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="pull_request_id"></param>
        /// <param name="repo_slug"></param>
        /// <returns>Task of Error</returns>
        [Get("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/commits")]
        System.Threading.Tasks.Task<Error> RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("pull_request_id")]string pull_request_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Declines the pull request.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="pull_request_id"></param>
        /// <param name="repo_slug"></param>
        /// <returns>Task of Pullrequest</returns>
        [Post("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/decline")]
        System.Threading.Tasks.Task<Pullrequest> RepositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePost([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("pull_request_id")]string pull_request_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Redirects to the [repository diff](../../diff/%7Bspec%7D) with the revspec that corresponds to the pull request.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="pull_request_id"></param>
        /// <param name="repo_slug"></param>
        /// <returns>Task of void</returns>
        [Get("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/diff")]
        System.Threading.Tasks.Task RepositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("pull_request_id")]string pull_request_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Redirects to the [repository diffstat](../../diffstat/%7Bspec%7D) with the revspec that corresponds to the pull request.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="pull_request_id"></param>
        /// <param name="repo_slug"></param>
        /// <returns>Task of void</returns>
        [Get("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/diffstat")]
        System.Threading.Tasks.Task RepositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffstatGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("pull_request_id")]string pull_request_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the specified pull request.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="pull_request_id">The id of the pull request.</param>
        /// <returns>Task of Pullrequest</returns>
        [Get("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}")]
        System.Threading.Tasks.Task<Pullrequest> RepositoriesUsernameRepoSlugPullrequestsPullRequestIdGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("pull_request_id")]int? pull_request_id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Merges the pull request.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="pull_request_id"></param>
        /// <param name="repo_slug"></param>
        /// <param name="_body"> (optional)</param>
        /// <returns>Task of Pullrequest</returns>
        [Post("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/merge")]
        System.Threading.Tasks.Task<Pullrequest> RepositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePost([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("pull_request_id")]string pull_request_id, [AliasAs("repo_slug")]string repo_slug, [Body]PullrequestMergeParameters _body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="pull_request_id"></param>
        /// <param name="repo_slug"></param>
        /// <returns>Task of Error</returns>
        [Get("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/patch")]
        System.Threading.Tasks.Task<Error> RepositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("pull_request_id")]string pull_request_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Mutates the specified pull request.  This can be used to change the pull request&#39;s branches or description.  Only open pull requests can be mutated.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="pull_request_id">The id of the pull request.</param>
        /// <param name="_body">The pull request that is to be updated. (optional)</param>
        /// <returns>Task of Pullrequest</returns>
        [Put("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}")]
        System.Threading.Tasks.Task<Pullrequest> RepositoriesUsernameRepoSlugPullrequestsPullRequestIdPut([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("pull_request_id")]int? pull_request_id, [Body]Pullrequest _body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all statuses (e.g. build results) for the given pull request.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="pull_request_id">The id of the pull request.</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of PaginatedCommitstatuses</returns>
        [Get("/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/statuses")]
        System.Threading.Tasks.Task<PaginatedCommitstatuses> RepositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("pull_request_id")]int? pull_request_id, [AliasAs("repo_slug")]string repo_slug);
        #endregion Asynchronous Operations
    }
}
