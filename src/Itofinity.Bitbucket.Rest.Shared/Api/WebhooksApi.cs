/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Refit;
using Itofinity.Bitbucket.Rest.Client;
using Itofinity.Bitbucket.Rest.Model;

namespace Itofinity.Bitbucket.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi
    {
        #region Asynchronous Operations

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the webhook resource or subject types on which webhooks can be registered.  Each resource/subject type contains an &#x60;events&#x60; link that returns the paginated list of specific events each individual subject type can emit.  This endpoint is publicly accessible and does not require authentication or scopes.  Example:  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/hook_events  {     \&quot;repository\&quot;: {         \&quot;links\&quot;: {             \&quot;events\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/hook_events/repository\&quot;             }         }     },     \&quot;team\&quot;: {         \&quot;links\&quot;: {             \&quot;events\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/hook_events/team\&quot;             }         }     },     \&quot;user\&quot;: {         \&quot;links\&quot;: {             \&quot;events\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/hook_events/user\&quot;             }         }     } } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SubjectTypes</returns>
        [Get("/hook_events")]
        System.Threading.Tasks.Task<SubjectTypes> HookEventsGet([Header("UserAgent")] string userAgent);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all valid webhook events for the specified entity.  This is public data that does not require any scopes or authentication.  Example:  NOTE: The following example is a truncated response object for the &#x60;team&#x60; &#x60;subject_type&#x60;. We return the same structure for the other &#x60;subject_type&#x60; objects.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/hook_events/team {     \&quot;page\&quot;: 1,     \&quot;pagelen\&quot;: 30,     \&quot;size\&quot;: 21,     \&quot;values\&quot;: [         {             \&quot;category\&quot;: \&quot;Repository\&quot;,             \&quot;description\&quot;: \&quot;Whenever a repository push occurs\&quot;,             \&quot;event\&quot;: \&quot;repo:push\&quot;,             \&quot;label\&quot;: \&quot;Push\&quot;         },         {             \&quot;category\&quot;: \&quot;Repository\&quot;,             \&quot;description\&quot;: \&quot;Whenever a repository fork occurs\&quot;,             \&quot;event\&quot;: \&quot;repo:fork\&quot;,             \&quot;label\&quot;: \&quot;Fork\&quot;         },         ...         {             \&quot;category\&quot;: \&quot;Repository\&quot;,             \&quot;description\&quot;: \&quot;Whenever a repository import occurs\&quot;,             \&quot;event\&quot;: \&quot;repo:imported\&quot;,             \&quot;label\&quot;: \&quot;Import\&quot;         }     ] } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject_type">A resource or subject type.</param>
        /// <returns>Task of PaginatedHookEvents</returns>
        [Get("/hook_events/{subject_type}")]
        System.Threading.Tasks.Task<PaginatedHookEvents> HookEventsSubjectTypeGet([Header("UserAgent")] string userAgent, [AliasAs("subject_type")]string subject_type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of webhooks installed on this repository.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="repo_slug"></param>
        /// <returns>Task of PaginatedWebhookSubscriptions</returns>
        [Get("/repositories/{username}/{repo_slug}/hooks")]
        System.Threading.Tasks.Task<PaginatedWebhookSubscriptions> RepositoriesUsernameRepoSlugHooksGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new webhook on the specified repository.  Example:  &#x60;&#x60;&#x60; $ curl -X POST -u credentials -H &#39;Content-Type: application/json&#39;           https://api.bitbucket.org/2.0/repositories/username/slug/hooks           -d &#39;     {       \&quot;description\&quot;: \&quot;Webhook Description\&quot;,       \&quot;url\&quot;: \&quot;https://example.com/\&quot;,       \&quot;active\&quot;: true,       \&quot;events\&quot;: [         \&quot;repo:push\&quot;,         \&quot;issue:created\&quot;,         \&quot;issue:updated\&quot;       ]     }&#39; &#x60;&#x60;&#x60;  Note that this call requires the webhook scope, as well as any scope that applies to the events that the webhook subscribes to. In the example above that means: &#x60;webhook&#x60;, &#x60;repository&#x60; and &#x60;issue&#x60;.  Also note that the &#x60;url&#x60; must properly resolve and cannot be an internal, non-routed address.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="repo_slug"></param>
        /// <returns>Task of WebhookSubscription</returns>
        [Post("/repositories/{username}/{repo_slug}/hooks")]
        System.Threading.Tasks.Task<WebhookSubscription> RepositoriesUsernameRepoSlugHooksPost([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the specified webhook subscription from the given repository.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="repo_slug"></param>
        /// <param name="uid">The installed webhook&#39;s id</param>
        /// <returns>Task of void</returns>
        [Delete("/repositories/{username}/{repo_slug}/hooks/{uid}")]
        System.Threading.Tasks.Task RepositoriesUsernameRepoSlugHooksUidDelete([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("uid")]string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the webhook with the specified id installed on the specified repository.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="repo_slug"></param>
        /// <param name="uid">The installed webhook&#39;s id.</param>
        /// <returns>Task of WebhookSubscription</returns>
        [Get("/repositories/{username}/{repo_slug}/hooks/{uid}")]
        System.Threading.Tasks.Task<WebhookSubscription> RepositoriesUsernameRepoSlugHooksUidGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("uid")]string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the specified webhook subscription.  The following properties can be mutated:  * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;active&#x60; * &#x60;events&#x60;
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="repo_slug"></param>
        /// <param name="uid">The installed webhook&#39;s id</param>
        /// <returns>Task of WebhookSubscription</returns>
        [Put("/repositories/{username}/{repo_slug}/hooks/{uid}")]
        System.Threading.Tasks.Task<WebhookSubscription> RepositoriesUsernameRepoSlugHooksUidPut([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("uid")]string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of webhooks installed on this team.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of PaginatedWebhookSubscriptions</returns>
        [Get("/teams/{username}/hooks")]
        System.Threading.Tasks.Task<PaginatedWebhookSubscriptions> TeamsUsernameHooksGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new webhook on the specified team.  Team webhooks are fired for events from all repositories belonging to that team account.  Note that only admins can install webhooks on teams.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of WebhookSubscription</returns>
        [Post("/teams/{username}/hooks")]
        System.Threading.Tasks.Task<WebhookSubscription> TeamsUsernameHooksPost([Header("UserAgent")] string userAgent, [AliasAs("username")]string username);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the specified webhook subscription from the given team account.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="uid">The installed webhook&#39;s id</param>
        /// <returns>Task of void</returns>
        [Delete("/teams/{username}/hooks/{uid}")]
        System.Threading.Tasks.Task TeamsUsernameHooksUidDelete([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("uid")]string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the webhook with the specified id installed on the given team account.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="uid">The installed webhook&#39;s id.</param>
        /// <returns>Task of WebhookSubscription</returns>
        [Get("/teams/{username}/hooks/{uid}")]
        System.Threading.Tasks.Task<WebhookSubscription> TeamsUsernameHooksUidGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("uid")]string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the specified webhook subscription.  The following properties can be mutated:  * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;active&#x60; * &#x60;events&#x60;
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="uid">The installed webhook&#39;s id</param>
        /// <returns>Task of WebhookSubscription</returns>
        [Put("/teams/{username}/hooks/{uid}")]
        System.Threading.Tasks.Task<WebhookSubscription> TeamsUsernameHooksUidPut([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("uid")]string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of webhooks installed on this user account.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of PaginatedWebhookSubscriptions</returns>
        [Get("/users/{username}/hooks")]
        System.Threading.Tasks.Task<PaginatedWebhookSubscriptions> UsersUsernameHooksGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new webhook on the specified user account.  Account-level webhooks are fired for events from all repositories belonging to that account.  Note that one can only register webhooks on one&#39;s own account, not that of others.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of WebhookSubscription</returns>
        [Post("/users/{username}/hooks")]
        System.Threading.Tasks.Task<WebhookSubscription> UsersUsernameHooksPost([Header("UserAgent")] string userAgent, [AliasAs("username")]string username);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the specified webhook subscription from the given user account.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="uid">The installed webhook&#39;s id</param>
        /// <returns>Task of void</returns>
        [Delete("/users/{username}/hooks/{uid}")]
        System.Threading.Tasks.Task UsersUsernameHooksUidDelete([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("uid")]string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the webhook with the specified id installed on the given user account.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="uid">The installed webhook&#39;s id.</param>
        /// <returns>Task of WebhookSubscription</returns>
        [Get("/users/{username}/hooks/{uid}")]
        System.Threading.Tasks.Task<WebhookSubscription> UsersUsernameHooksUidGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("uid")]string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the specified webhook subscription.  The following properties can be mutated:  * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;active&#x60; * &#x60;events&#x60;
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="uid">The installed webhook&#39;s id</param>
        /// <returns>Task of WebhookSubscription</returns>
        [Put("/users/{username}/hooks/{uid}")]
        System.Threading.Tasks.Task<WebhookSubscription> UsersUsernameHooksUidPut([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("uid")]string uid);
        #endregion Asynchronous Operations
    }
}
