/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Itofinity.Bitbucket.Rest.Model
{
    /// <summary>
    /// IssueChangeChanges
    /// </summary>
    [DataContract]
    public partial class IssueChangeChanges :  IEquatable<IssueChangeChanges>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueChangeChanges" /> class.
        /// </summary>
        /// <param name="Assignee">Assignee.</param>
        /// <param name="State">State.</param>
        /// <param name="Title">Title.</param>
        /// <param name="Kind">Kind.</param>
        /// <param name="Milestone">Milestone.</param>
        /// <param name="Component">Component.</param>
        /// <param name="Priority">Priority.</param>
        /// <param name="_Version">_Version.</param>
        /// <param name="Content">Content.</param>
        public IssueChangeChanges(IssueChangeChangesAssignee Assignee = default(IssueChangeChangesAssignee), IssueChangeChangesAssignee State = default(IssueChangeChangesAssignee), IssueChangeChangesAssignee Title = default(IssueChangeChangesAssignee), IssueChangeChangesAssignee Kind = default(IssueChangeChangesAssignee), IssueChangeChangesAssignee Milestone = default(IssueChangeChangesAssignee), IssueChangeChangesAssignee Component = default(IssueChangeChangesAssignee), IssueChangeChangesAssignee Priority = default(IssueChangeChangesAssignee), IssueChangeChangesAssignee _Version = default(IssueChangeChangesAssignee), IssueChangeChangesAssignee Content = default(IssueChangeChangesAssignee))
        {
            this.Assignee = Assignee;
            this.State = State;
            this.Title = Title;
            this.Kind = Kind;
            this.Milestone = Milestone;
            this.Component = Component;
            this.Priority = Priority;
            this._Version = _Version;
            this.Content = Content;
        }
        
        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name="assignee", EmitDefaultValue=false)]
        public IssueChangeChangesAssignee Assignee { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public IssueChangeChangesAssignee State { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public IssueChangeChangesAssignee Title { get; set; }
        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public IssueChangeChangesAssignee Kind { get; set; }
        /// <summary>
        /// Gets or Sets Milestone
        /// </summary>
        [DataMember(Name="milestone", EmitDefaultValue=false)]
        public IssueChangeChangesAssignee Milestone { get; set; }
        /// <summary>
        /// Gets or Sets Component
        /// </summary>
        [DataMember(Name="component", EmitDefaultValue=false)]
        public IssueChangeChangesAssignee Component { get; set; }
        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public IssueChangeChangesAssignee Priority { get; set; }
        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public IssueChangeChangesAssignee _Version { get; set; }
        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public IssueChangeChangesAssignee Content { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssueChangeChanges {\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Milestone: ").Append(Milestone).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IssueChangeChanges);
        }

        /// <summary>
        /// Returns true if IssueChangeChanges instances are equal
        /// </summary>
        /// <param name="other">Instance of IssueChangeChanges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueChangeChanges other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Assignee == other.Assignee ||
                    this.Assignee != null &&
                    this.Assignee.Equals(other.Assignee)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Kind == other.Kind ||
                    this.Kind != null &&
                    this.Kind.Equals(other.Kind)
                ) && 
                (
                    this.Milestone == other.Milestone ||
                    this.Milestone != null &&
                    this.Milestone.Equals(other.Milestone)
                ) && 
                (
                    this.Component == other.Component ||
                    this.Component != null &&
                    this.Component.Equals(other.Component)
                ) && 
                (
                    this.Priority == other.Priority ||
                    this.Priority != null &&
                    this.Priority.Equals(other.Priority)
                ) && 
                (
                    this._Version == other._Version ||
                    this._Version != null &&
                    this._Version.Equals(other._Version)
                ) && 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Assignee != null)
                    hash = hash * 59 + this.Assignee.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Kind != null)
                    hash = hash * 59 + this.Kind.GetHashCode();
                if (this.Milestone != null)
                    hash = hash * 59 + this.Milestone.GetHashCode();
                if (this.Component != null)
                    hash = hash * 59 + this.Component.GetHashCode();
                if (this.Priority != null)
                    hash = hash * 59 + this.Priority.GetHashCode();
                if (this._Version != null)
                    hash = hash * 59 + this._Version.GetHashCode();
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
