/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Itofinity.Bitbucket.Rest.Model
{
    /// <summary>
    /// CommentContent
    /// </summary>
    [DataContract]
    public partial class CommentContent :  IEquatable<CommentContent>, IValidatableObject
    {
        /// <summary>
        /// The type of markup language the raw content is to be interpreted in.
        /// </summary>
        /// <value>The type of markup language the raw content is to be interpreted in.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MarkupEnum
        {
            
            /// <summary>
            /// Enum Markdown for "markdown"
            /// </summary>
            [EnumMember(Value = "markdown")]
            Markdown,
            
            /// <summary>
            /// Enum Creole for "creole"
            /// </summary>
            [EnumMember(Value = "creole")]
            Creole,
            
            /// <summary>
            /// Enum Plaintext for "plaintext"
            /// </summary>
            [EnumMember(Value = "plaintext")]
            Plaintext
        }

        /// <summary>
        /// The type of markup language the raw content is to be interpreted in.
        /// </summary>
        /// <value>The type of markup language the raw content is to be interpreted in.</value>
        [DataMember(Name="markup", EmitDefaultValue=false)]
        public MarkupEnum? Markup { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommentContent" /> class.
        /// </summary>
        /// <param name="Raw">The text as it was typed by a user..</param>
        /// <param name="Markup">The type of markup language the raw content is to be interpreted in..</param>
        /// <param name="Html">The user&#39;s content rendered as HTML..</param>
        public CommentContent(string Raw = default(string), MarkupEnum? Markup = default(MarkupEnum?), string Html = default(string))
        {
            this.Raw = Raw;
            this.Markup = Markup;
            this.Html = Html;
        }
        
        /// <summary>
        /// The text as it was typed by a user.
        /// </summary>
        /// <value>The text as it was typed by a user.</value>
        [DataMember(Name="raw", EmitDefaultValue=false)]
        public string Raw { get; set; }
        /// <summary>
        /// The user&#39;s content rendered as HTML.
        /// </summary>
        /// <value>The user&#39;s content rendered as HTML.</value>
        [DataMember(Name="html", EmitDefaultValue=false)]
        public string Html { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommentContent {\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("  Markup: ").Append(Markup).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CommentContent);
        }

        /// <summary>
        /// Returns true if CommentContent instances are equal
        /// </summary>
        /// <param name="other">Instance of CommentContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommentContent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Raw == other.Raw ||
                    this.Raw != null &&
                    this.Raw.Equals(other.Raw)
                ) && 
                (
                    this.Markup == other.Markup ||
                    this.Markup != null &&
                    this.Markup.Equals(other.Markup)
                ) && 
                (
                    this.Html == other.Html ||
                    this.Html != null &&
                    this.Html.Equals(other.Html)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Raw != null)
                    hash = hash * 59 + this.Raw.GetHashCode();
                if (this.Markup != null)
                    hash = hash * 59 + this.Markup.GetHashCode();
                if (this.Html != null)
                    hash = hash * 59 + this.Html.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
