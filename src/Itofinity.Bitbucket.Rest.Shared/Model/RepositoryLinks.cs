/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Itofinity.Bitbucket.Rest.Model
{
    /// <summary>
    /// RepositoryLinks
    /// </summary>
    [DataContract]
    public partial class RepositoryLinks :  IEquatable<RepositoryLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryLinks" /> class.
        /// </summary>
        /// <param name="Self">Self.</param>
        /// <param name="Html">Html.</param>
        /// <param name="Avatar">Avatar.</param>
        /// <param name="Pullrequests">Pullrequests.</param>
        /// <param name="Commits">Commits.</param>
        /// <param name="Forks">Forks.</param>
        /// <param name="Watchers">Watchers.</param>
        /// <param name="Downloads">Downloads.</param>
        /// <param name="Clone">Clone.</param>
        /// <param name="Hooks">Hooks.</param>
        public RepositoryLinks(CommentLinksSelf Self = default(CommentLinksSelf), CommentLinksSelf Html = default(CommentLinksSelf), CommentLinksSelf Avatar = default(CommentLinksSelf), CommentLinksSelf Pullrequests = default(CommentLinksSelf), CommentLinksSelf Commits = default(CommentLinksSelf), CommentLinksSelf Forks = default(CommentLinksSelf), CommentLinksSelf Watchers = default(CommentLinksSelf), CommentLinksSelf Downloads = default(CommentLinksSelf), List<CommentLinksSelf> Clone = default(List<CommentLinksSelf>), CommentLinksSelf Hooks = default(CommentLinksSelf))
        {
            this.Self = Self;
            this.Html = Html;
            this.Avatar = Avatar;
            this.Pullrequests = Pullrequests;
            this.Commits = Commits;
            this.Forks = Forks;
            this.Watchers = Watchers;
            this.Downloads = Downloads;
            this.Clone = Clone;
            this.Hooks = Hooks;
        }
        
        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public CommentLinksSelf Self { get; set; }
        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [DataMember(Name="html", EmitDefaultValue=false)]
        public CommentLinksSelf Html { get; set; }
        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [DataMember(Name="avatar", EmitDefaultValue=false)]
        public CommentLinksSelf Avatar { get; set; }
        /// <summary>
        /// Gets or Sets Pullrequests
        /// </summary>
        [DataMember(Name="pullrequests", EmitDefaultValue=false)]
        public CommentLinksSelf Pullrequests { get; set; }
        /// <summary>
        /// Gets or Sets Commits
        /// </summary>
        [DataMember(Name="commits", EmitDefaultValue=false)]
        public CommentLinksSelf Commits { get; set; }
        /// <summary>
        /// Gets or Sets Forks
        /// </summary>
        [DataMember(Name="forks", EmitDefaultValue=false)]
        public CommentLinksSelf Forks { get; set; }
        /// <summary>
        /// Gets or Sets Watchers
        /// </summary>
        [DataMember(Name="watchers", EmitDefaultValue=false)]
        public CommentLinksSelf Watchers { get; set; }
        /// <summary>
        /// Gets or Sets Downloads
        /// </summary>
        [DataMember(Name="downloads", EmitDefaultValue=false)]
        public CommentLinksSelf Downloads { get; set; }
        /// <summary>
        /// Gets or Sets Clone
        /// </summary>
        [DataMember(Name="clone", EmitDefaultValue=false)]
        public List<CommentLinksSelf> Clone { get; set; }
        /// <summary>
        /// Gets or Sets Hooks
        /// </summary>
        [DataMember(Name="hooks", EmitDefaultValue=false)]
        public CommentLinksSelf Hooks { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RepositoryLinks {\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Pullrequests: ").Append(Pullrequests).Append("\n");
            sb.Append("  Commits: ").Append(Commits).Append("\n");
            sb.Append("  Forks: ").Append(Forks).Append("\n");
            sb.Append("  Watchers: ").Append(Watchers).Append("\n");
            sb.Append("  Downloads: ").Append(Downloads).Append("\n");
            sb.Append("  Clone: ").Append(Clone).Append("\n");
            sb.Append("  Hooks: ").Append(Hooks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RepositoryLinks);
        }

        /// <summary>
        /// Returns true if RepositoryLinks instances are equal
        /// </summary>
        /// <param name="other">Instance of RepositoryLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RepositoryLinks other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Self == other.Self ||
                    this.Self != null &&
                    this.Self.Equals(other.Self)
                ) && 
                (
                    this.Html == other.Html ||
                    this.Html != null &&
                    this.Html.Equals(other.Html)
                ) && 
                (
                    this.Avatar == other.Avatar ||
                    this.Avatar != null &&
                    this.Avatar.Equals(other.Avatar)
                ) && 
                (
                    this.Pullrequests == other.Pullrequests ||
                    this.Pullrequests != null &&
                    this.Pullrequests.Equals(other.Pullrequests)
                ) && 
                (
                    this.Commits == other.Commits ||
                    this.Commits != null &&
                    this.Commits.Equals(other.Commits)
                ) && 
                (
                    this.Forks == other.Forks ||
                    this.Forks != null &&
                    this.Forks.Equals(other.Forks)
                ) && 
                (
                    this.Watchers == other.Watchers ||
                    this.Watchers != null &&
                    this.Watchers.Equals(other.Watchers)
                ) && 
                (
                    this.Downloads == other.Downloads ||
                    this.Downloads != null &&
                    this.Downloads.Equals(other.Downloads)
                ) && 
                (
                    this.Clone == other.Clone ||
                    this.Clone != null &&
                    this.Clone.SequenceEqual(other.Clone)
                ) && 
                (
                    this.Hooks == other.Hooks ||
                    this.Hooks != null &&
                    this.Hooks.Equals(other.Hooks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Self != null)
                    hash = hash * 59 + this.Self.GetHashCode();
                if (this.Html != null)
                    hash = hash * 59 + this.Html.GetHashCode();
                if (this.Avatar != null)
                    hash = hash * 59 + this.Avatar.GetHashCode();
                if (this.Pullrequests != null)
                    hash = hash * 59 + this.Pullrequests.GetHashCode();
                if (this.Commits != null)
                    hash = hash * 59 + this.Commits.GetHashCode();
                if (this.Forks != null)
                    hash = hash * 59 + this.Forks.GetHashCode();
                if (this.Watchers != null)
                    hash = hash * 59 + this.Watchers.GetHashCode();
                if (this.Downloads != null)
                    hash = hash * 59 + this.Downloads.GetHashCode();
                if (this.Clone != null)
                    hash = hash * 59 + this.Clone.GetHashCode();
                if (this.Hooks != null)
                    hash = hash * 59 + this.Hooks.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
