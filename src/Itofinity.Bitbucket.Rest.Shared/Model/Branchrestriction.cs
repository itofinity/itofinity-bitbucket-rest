/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Itofinity.Bitbucket.Rest.Model
{
    /// <summary>
    /// Branchrestriction
    /// </summary>
    [DataContract]
    public partial class Branchrestriction : ModelObject,  IEquatable<Branchrestriction>, IValidatableObject
    {
        /// <summary>
        /// The type of restriction that is being applied
        /// </summary>
        /// <value>The type of restriction that is being applied</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KindEnum
        {
            
            /// <summary>
            /// Enum Requiretaskstobecompleted for "require_tasks_to_be_completed"
            /// </summary>
            [EnumMember(Value = "require_tasks_to_be_completed")]
            Requiretaskstobecompleted,
            
            /// <summary>
            /// Enum Requirepassingbuildstomerge for "require_passing_builds_to_merge"
            /// </summary>
            [EnumMember(Value = "require_passing_builds_to_merge")]
            Requirepassingbuildstomerge,
            
            /// <summary>
            /// Enum Force for "force"
            /// </summary>
            [EnumMember(Value = "force")]
            Force,
            
            /// <summary>
            /// Enum Requirealldependenciesmerged for "require_all_dependencies_merged"
            /// </summary>
            [EnumMember(Value = "require_all_dependencies_merged")]
            Requirealldependenciesmerged,
            
            /// <summary>
            /// Enum Push for "push"
            /// </summary>
            [EnumMember(Value = "push")]
            Push,
            
            /// <summary>
            /// Enum Requireapprovalstomerge for "require_approvals_to_merge"
            /// </summary>
            [EnumMember(Value = "require_approvals_to_merge")]
            Requireapprovalstomerge,
            
            /// <summary>
            /// Enum Enforcemergechecks for "enforce_merge_checks"
            /// </summary>
            [EnumMember(Value = "enforce_merge_checks")]
            Enforcemergechecks,
            
            /// <summary>
            /// Enum Restrictmerges for "restrict_merges"
            /// </summary>
            [EnumMember(Value = "restrict_merges")]
            Restrictmerges,
            
            /// <summary>
            /// Enum Resetpullrequestapprovalsonchange for "reset_pullrequest_approvals_on_change"
            /// </summary>
            [EnumMember(Value = "reset_pullrequest_approvals_on_change")]
            Resetpullrequestapprovalsonchange,
            
            /// <summary>
            /// Enum Delete for "delete"
            /// </summary>
            [EnumMember(Value = "delete")]
            Delete
        }

        /// <summary>
        /// The type of restriction that is being applied
        /// </summary>
        /// <value>The type of restriction that is being applied</value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public KindEnum? Kind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Branchrestriction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Branchrestriction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Branchrestriction" /> class.
        /// </summary>
        /// <param name="Type">Type (required).</param>
        /// <param name="Links">Links.</param>
        /// <param name="Id">The branch restriction status&#39; id..</param>
        /// <param name="Kind">The type of restriction that is being applied.</param>
        /// <param name="Users">Users.</param>
        /// <param name="Groups">Groups.</param>
        /// <param name="Value">Value with kind-specific semantics: \&quot;require_approvals_to_merge\&quot; uses it to require a minimum number of approvals on a PR; \&quot;require_passing_builds_to_merge\&quot; uses it to require a minimum number of passing builds..</param>
        public Branchrestriction(string Type = default(string), EmailAddressLinks Links = default(EmailAddressLinks), int? Id = default(int?), KindEnum? Kind = default(KindEnum?), List<Account> Users = default(List<Account>), List<Group> Groups = default(List<Group>), int? Value = default(int?))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for Branchrestriction and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.Links = Links;
            this.Id = Id;
            this.Kind = Kind;
            this.Users = Users;
            this.Groups = Groups;
            this.Value = Value;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public EmailAddressLinks Links { get; set; }
        /// <summary>
        /// The branch restriction status&#39; id.
        /// </summary>
        /// <value>The branch restriction status&#39; id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<Account> Users { get; set; }
        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public List<Group> Groups { get; set; }
        /// <summary>
        /// Value with kind-specific semantics: \&quot;require_approvals_to_merge\&quot; uses it to require a minimum number of approvals on a PR; \&quot;require_passing_builds_to_merge\&quot; uses it to require a minimum number of passing builds.
        /// </summary>
        /// <value>Value with kind-specific semantics: \&quot;require_approvals_to_merge\&quot; uses it to require a minimum number of approvals on a PR; \&quot;require_passing_builds_to_merge\&quot; uses it to require a minimum number of passing builds.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public int? Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Branchrestriction {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Branchrestriction);
        }

        /// <summary>
        /// Returns true if Branchrestriction instances are equal
        /// </summary>
        /// <param name="other">Instance of Branchrestriction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Branchrestriction other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Kind == other.Kind ||
                    this.Kind != null &&
                    this.Kind.Equals(other.Kind)
                ) && 
                (
                    this.Users == other.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(other.Users)
                ) && 
                (
                    this.Groups == other.Groups ||
                    this.Groups != null &&
                    this.Groups.SequenceEqual(other.Groups)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Kind != null)
                    hash = hash * 59 + this.Kind.GetHashCode();
                if (this.Users != null)
                    hash = hash * 59 + this.Users.GetHashCode();
                if (this.Groups != null)
                    hash = hash * 59 + this.Groups.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
