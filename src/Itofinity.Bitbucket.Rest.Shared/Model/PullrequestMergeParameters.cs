/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Itofinity.Bitbucket.Rest.Model
{
    /// <summary>
    /// The metadata that describes a pull request merge.
    /// </summary>
    [DataContract]
    public partial class PullrequestMergeParameters :  IEquatable<PullrequestMergeParameters>, IValidatableObject
    {
        /// <summary>
        /// The merge strategy that will be used to merge the pull request.
        /// </summary>
        /// <value>The merge strategy that will be used to merge the pull request.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MergeStrategyEnum
        {
            
            /// <summary>
            /// Enum Mergecommit for "merge_commit"
            /// </summary>
            [EnumMember(Value = "merge_commit")]
            Mergecommit,
            
            /// <summary>
            /// Enum Squash for "squash"
            /// </summary>
            [EnumMember(Value = "squash")]
            Squash,
            
            /// <summary>
            /// Enum Fastforward for "fast_forward"
            /// </summary>
            [EnumMember(Value = "fast_forward")]
            Fastforward
        }

        /// <summary>
        /// The merge strategy that will be used to merge the pull request.
        /// </summary>
        /// <value>The merge strategy that will be used to merge the pull request.</value>
        [DataMember(Name="merge_strategy", EmitDefaultValue=false)]
        public MergeStrategyEnum? MergeStrategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PullrequestMergeParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PullrequestMergeParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PullrequestMergeParameters" /> class.
        /// </summary>
        /// <param name="Type">Type (required).</param>
        /// <param name="Message">The commit message that will be used on the resulting commit..</param>
        /// <param name="CloseSourceBranch">Whether the source branch should be deleted. If this is not provided, we fallback to the value used when the pull request was created, which defaults to False.</param>
        /// <param name="MergeStrategy">The merge strategy that will be used to merge the pull request. (default to MergeStrategyEnum.Mergecommit).</param>
        public PullrequestMergeParameters(string Type = default(string), string Message = default(string), bool? CloseSourceBranch = default(bool?), MergeStrategyEnum? MergeStrategy = MergeStrategyEnum.Mergecommit)
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for PullrequestMergeParameters and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.Message = Message;
            this.CloseSourceBranch = CloseSourceBranch;
            // use default value if no "MergeStrategy" provided
            if (MergeStrategy == null)
            {
                this.MergeStrategy = MergeStrategyEnum.Mergecommit;
            }
            else
            {
                this.MergeStrategy = MergeStrategy;
            }
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// The commit message that will be used on the resulting commit.
        /// </summary>
        /// <value>The commit message that will be used on the resulting commit.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Whether the source branch should be deleted. If this is not provided, we fallback to the value used when the pull request was created, which defaults to False
        /// </summary>
        /// <value>Whether the source branch should be deleted. If this is not provided, we fallback to the value used when the pull request was created, which defaults to False</value>
        [DataMember(Name="close_source_branch", EmitDefaultValue=false)]
        public bool? CloseSourceBranch { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PullrequestMergeParameters {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  CloseSourceBranch: ").Append(CloseSourceBranch).Append("\n");
            sb.Append("  MergeStrategy: ").Append(MergeStrategy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PullrequestMergeParameters);
        }

        /// <summary>
        /// Returns true if PullrequestMergeParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of PullrequestMergeParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PullrequestMergeParameters other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.CloseSourceBranch == other.CloseSourceBranch ||
                    this.CloseSourceBranch != null &&
                    this.CloseSourceBranch.Equals(other.CloseSourceBranch)
                ) && 
                (
                    this.MergeStrategy == other.MergeStrategy ||
                    this.MergeStrategy != null &&
                    this.MergeStrategy.Equals(other.MergeStrategy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.CloseSourceBranch != null)
                    hash = hash * 59 + this.CloseSourceBranch.GetHashCode();
                if (this.MergeStrategy != null)
                    hash = hash * 59 + this.MergeStrategy.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
