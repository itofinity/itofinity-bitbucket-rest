/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;
using Refit;

using Itofinity.Bitbucket.Rest.Client;
using Itofinity.Bitbucket.Rest.Api;
using Itofinity.Bitbucket.Rest.Model;

namespace Itofinity.Bitbucket.Rest.Test
{
    /// <summary>
    ///  Class for testing BranchrestrictionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BranchrestrictionsApiTests
    {
        private string hostUrl = "";
        private string userAgent = "Itofinity.Bitbucket.Rest.Test.BranchrestrictionsApiTests";

        private IBranchrestrictionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = RestService.For<IBranchrestrictionsApi>(hostUrl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BranchrestrictionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BranchrestrictionsApi
            //Assert.IsInstanceOfType(typeof(BranchrestrictionsApi), instance, "instance is a BranchrestrictionsApi");
        }

        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugBranchRestrictionsGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugBranchRestrictionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugBranchRestrictionsGet(userAgent, username, repo_slug);
            //Assert.IsInstanceOf<PaginatedBranchrestrictions> (response, "response is PaginatedBranchrestrictions");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugBranchRestrictionsIdDelete
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugBranchRestrictionsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string id = null;
            //instance.RepositoriesUsernameRepoSlugBranchRestrictionsIdDelete(userAgent, username, repo_slug, id);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugBranchRestrictionsIdGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugBranchRestrictionsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string id = null;
            //var response = await instance.RepositoriesUsernameRepoSlugBranchRestrictionsIdGet(userAgent, username, repo_slug, id);
            //Assert.IsInstanceOf<Branchrestriction> (response, "response is Branchrestriction");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugBranchRestrictionsIdPut
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugBranchRestrictionsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string id = null;
            //Branchrestriction _body = null;
            //var response = await instance.RepositoriesUsernameRepoSlugBranchRestrictionsIdPut(userAgent, username, repo_slug, id, _body);
            //Assert.IsInstanceOf<Branchrestriction> (response, "response is Branchrestriction");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugBranchRestrictionsPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugBranchRestrictionsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //Branchrestriction _body = null;
            //var response = await instance.RepositoriesUsernameRepoSlugBranchRestrictionsPost(userAgent, username, repo_slug, _body);
            //Assert.IsInstanceOf<Branchrestriction> (response, "response is Branchrestriction");
        }
        
    }

}
