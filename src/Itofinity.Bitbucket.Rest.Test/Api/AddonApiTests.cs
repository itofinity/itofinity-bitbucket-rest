/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;
using Refit;

using Itofinity.Bitbucket.Rest.Client;
using Itofinity.Bitbucket.Rest.Api;
using Itofinity.Bitbucket.Rest.Model;

namespace Itofinity.Bitbucket.Rest.Test
{
    /// <summary>
    ///  Class for testing AddonApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AddonApiTests
    {
        private string hostUrl = "";
        private string userAgent = "Itofinity.Bitbucket.Rest.Test.AddonApiTests";

        private IAddonApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = RestService.For<IAddonApi>(hostUrl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AddonApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AddonApi
            //Assert.IsInstanceOfType(typeof(AddonApi), instance, "instance is a AddonApi");
        }

        
        /// <summary>
        /// Test AddonDelete
        /// </summary>
        [Test]
        public async void AddonDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = await instance.AddonDelete(userAgent);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test AddonLinkersGet
        /// </summary>
        [Test]
        public async void AddonLinkersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = await instance.AddonLinkersGet(userAgent);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test AddonLinkersLinkerKeyGet
        /// </summary>
        [Test]
        public async void AddonLinkersLinkerKeyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string linker_key = null;
            //var response = await instance.AddonLinkersLinkerKeyGet(userAgent, linker_key);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test AddonLinkersLinkerKeyValuesDelete
        /// </summary>
        [Test]
        public async void AddonLinkersLinkerKeyValuesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string linker_key = null;
            //var response = await instance.AddonLinkersLinkerKeyValuesDelete(userAgent, linker_key);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test AddonLinkersLinkerKeyValuesDelete_0
        /// </summary>
        [Test]
        public async void AddonLinkersLinkerKeyValuesDelete_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string linker_key = null;
            //var response = await instance.AddonLinkersLinkerKeyValuesDelete_0(userAgent, linker_key);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test AddonLinkersLinkerKeyValuesGet
        /// </summary>
        [Test]
        public async void AddonLinkersLinkerKeyValuesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string linker_key = null;
            //var response = await instance.AddonLinkersLinkerKeyValuesGet(userAgent, linker_key);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test AddonLinkersLinkerKeyValuesGet_0
        /// </summary>
        [Test]
        public async void AddonLinkersLinkerKeyValuesGet_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string linker_key = null;
            //var response = await instance.AddonLinkersLinkerKeyValuesGet_0(userAgent, linker_key);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test AddonLinkersLinkerKeyValuesPost
        /// </summary>
        [Test]
        public async void AddonLinkersLinkerKeyValuesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string linker_key = null;
            //var response = await instance.AddonLinkersLinkerKeyValuesPost(userAgent, linker_key);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test AddonLinkersLinkerKeyValuesPut
        /// </summary>
        [Test]
        public async void AddonLinkersLinkerKeyValuesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string linker_key = null;
            //var response = await instance.AddonLinkersLinkerKeyValuesPut(userAgent, linker_key);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test AddonPut
        /// </summary>
        [Test]
        public async void AddonPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = await instance.AddonPut(userAgent);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test AddonUsersTargetUserEventsEventKeyPost
        /// </summary>
        [Test]
        public async void AddonUsersTargetUserEventsEventKeyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string target_user = null;
            //string event_key = null;
            //instance.AddonUsersTargetUserEventsEventKeyPost(userAgent, target_user, event_key);
            
        }
        
    }

}
