/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;
using Refit;

using Itofinity.Bitbucket.Rest.Client;
using Itofinity.Bitbucket.Rest.Api;
using Itofinity.Bitbucket.Rest.Model;

namespace Itofinity.Bitbucket.Rest.Test
{
    /// <summary>
    ///  Class for testing PullrequestsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PullrequestsApiTests
    {
        private string hostUrl = "";
        private string userAgent = "Itofinity.Bitbucket.Rest.Test.PullrequestsApiTests";

        private IPullrequestsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = RestService.For<IPullrequestsApi>(hostUrl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PullrequestsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PullrequestsApi
            //Assert.IsInstanceOfType(typeof(PullrequestsApi), instance, "instance is a PullrequestsApi");
        }

        
        /// <summary>
        /// Test PullrequestsTargetUserGet
        /// </summary>
        [Test]
        public async void PullrequestsTargetUserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string target_user = null;
            //string username = null;
            //string state = null;
            //var response = await instance.PullrequestsTargetUserGet(userAgent, target_user, username, state);
            //Assert.IsInstanceOf<PaginatedPullrequests> (response, "response is PaginatedPullrequests");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugDefaultReviewersGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugDefaultReviewersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //instance.RepositoriesUsernameRepoSlugDefaultReviewersGet(userAgent, username, repo_slug);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDelete
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string target_username = null;
            //var response = await instance.RepositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDelete(userAgent, username, repo_slug, target_username);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string target_username = null;
            //var response = await instance.RepositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGet(userAgent, username, repo_slug, target_username);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePut
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string target_username = null;
            //var response = await instance.RepositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePut(userAgent, username, repo_slug, target_username);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsActivityGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsActivityGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //int? pull_request_id = null;
            //instance.RepositoriesUsernameRepoSlugPullrequestsActivityGet(userAgent, username, repo_slug, pull_request_id);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string state = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsGet(userAgent, username, repo_slug, state);
            //Assert.IsInstanceOf<PaginatedPullrequests> (response, "response is PaginatedPullrequests");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //Pullrequest _body = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsPost(userAgent, username, repo_slug, _body);
            //Assert.IsInstanceOf<Pullrequest> (response, "response is Pullrequest");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //int? pull_request_id = null;
            //instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGet(userAgent, username, repo_slug, pull_request_id);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDelete
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string pull_request_id = null;
            //string repo_slug = null;
            //instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDelete(userAgent, username, pull_request_id, repo_slug);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string pull_request_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePost(userAgent, username, pull_request_id, repo_slug);
            //Assert.IsInstanceOf<Participant> (response, "response is Participant");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string pull_request_id = null;
            //string comment_id = null;
            //string repo_slug = null;
            //instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete(userAgent, username, pull_request_id, comment_id, repo_slug);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string pull_request_id = null;
            //string comment_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet(userAgent, username, pull_request_id, comment_id, repo_slug);
            //Assert.IsInstanceOf<PullrequestComment> (response, "response is PullrequestComment");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string pull_request_id = null;
            //string comment_id = null;
            //string repo_slug = null;
            //PullrequestComment _body = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut(userAgent, username, pull_request_id, comment_id, repo_slug, _body);
            //Assert.IsInstanceOf<PullrequestComment> (response, "response is PullrequestComment");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //int? pull_request_id = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGet(userAgent, username, repo_slug, pull_request_id);
            //Assert.IsInstanceOf<PaginatedPullrequestComments> (response, "response is PaginatedPullrequestComments");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //int? pull_request_id = null;
            //PullrequestComment _body = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsPost(userAgent, username, repo_slug, pull_request_id, _body);
            //Assert.IsInstanceOf<PullrequestComment> (response, "response is PullrequestComment");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string pull_request_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGet(userAgent, username, pull_request_id, repo_slug);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string pull_request_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePost(userAgent, username, pull_request_id, repo_slug);
            //Assert.IsInstanceOf<Pullrequest> (response, "response is Pullrequest");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string pull_request_id = null;
            //string repo_slug = null;
            //instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGet(userAgent, username, pull_request_id, repo_slug);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffstatGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffstatGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string pull_request_id = null;
            //string repo_slug = null;
            //instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffstatGet(userAgent, username, pull_request_id, repo_slug);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //int? pull_request_id = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdGet(userAgent, username, repo_slug, pull_request_id);
            //Assert.IsInstanceOf<Pullrequest> (response, "response is Pullrequest");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string pull_request_id = null;
            //string repo_slug = null;
            //PullrequestMergeParameters _body = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePost(userAgent, username, pull_request_id, repo_slug, _body);
            //Assert.IsInstanceOf<Pullrequest> (response, "response is Pullrequest");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string pull_request_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGet(userAgent, username, pull_request_id, repo_slug);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdPut
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //int? pull_request_id = null;
            //Pullrequest _body = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdPut(userAgent, username, repo_slug, pull_request_id, _body);
            //Assert.IsInstanceOf<Pullrequest> (response, "response is Pullrequest");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //int? pull_request_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGet(userAgent, username, pull_request_id, repo_slug);
            //Assert.IsInstanceOf<PaginatedCommitstatuses> (response, "response is PaginatedCommitstatuses");
        }
        
    }

}
