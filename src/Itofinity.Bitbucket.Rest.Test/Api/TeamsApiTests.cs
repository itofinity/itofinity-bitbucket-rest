/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;
using Refit;

using Itofinity.Bitbucket.Rest.Client;
using Itofinity.Bitbucket.Rest.Api;
using Itofinity.Bitbucket.Rest.Model;

namespace Itofinity.Bitbucket.Rest.Test
{
    /// <summary>
    ///  Class for testing TeamsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TeamsApiTests
    {
        private string hostUrl = "";
        private string userAgent = "Itofinity.Bitbucket.Rest.Test.TeamsApiTests";

        private ITeamsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = RestService.For<ITeamsApi>(hostUrl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TeamsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TeamsApi
            //Assert.IsInstanceOfType(typeof(TeamsApi), instance, "instance is a TeamsApi");
        }

        
        /// <summary>
        /// Test TeamsGet
        /// </summary>
        [Test]
        public async void TeamsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //var response = await instance.TeamsGet(userAgent, role);
            //Assert.IsInstanceOf<PaginatedTeams> (response, "response is PaginatedTeams");
        }
        
        /// <summary>
        /// Test TeamsUsernameFollowersGet
        /// </summary>
        [Test]
        public async void TeamsUsernameFollowersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.TeamsUsernameFollowersGet(userAgent, username);
            //Assert.IsInstanceOf<PaginatedUsers> (response, "response is PaginatedUsers");
        }
        
        /// <summary>
        /// Test TeamsUsernameFollowingGet
        /// </summary>
        [Test]
        public async void TeamsUsernameFollowingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.TeamsUsernameFollowingGet(userAgent, username);
            //Assert.IsInstanceOf<PaginatedUsers> (response, "response is PaginatedUsers");
        }
        
        /// <summary>
        /// Test TeamsUsernameGet
        /// </summary>
        [Test]
        public async void TeamsUsernameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.TeamsUsernameGet(userAgent, username);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsUsernameHooksGet
        /// </summary>
        [Test]
        public async void TeamsUsernameHooksGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.TeamsUsernameHooksGet(userAgent, username);
            //Assert.IsInstanceOf<PaginatedWebhookSubscriptions> (response, "response is PaginatedWebhookSubscriptions");
        }
        
        /// <summary>
        /// Test TeamsUsernameHooksPost
        /// </summary>
        [Test]
        public async void TeamsUsernameHooksPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.TeamsUsernameHooksPost(userAgent, username);
            //Assert.IsInstanceOf<WebhookSubscription> (response, "response is WebhookSubscription");
        }
        
        /// <summary>
        /// Test TeamsUsernameHooksUidDelete
        /// </summary>
        [Test]
        public async void TeamsUsernameHooksUidDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string uid = null;
            //instance.TeamsUsernameHooksUidDelete(userAgent, username, uid);
            
        }
        
        /// <summary>
        /// Test TeamsUsernameHooksUidGet
        /// </summary>
        [Test]
        public async void TeamsUsernameHooksUidGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string uid = null;
            //var response = await instance.TeamsUsernameHooksUidGet(userAgent, username, uid);
            //Assert.IsInstanceOf<WebhookSubscription> (response, "response is WebhookSubscription");
        }
        
        /// <summary>
        /// Test TeamsUsernameHooksUidPut
        /// </summary>
        [Test]
        public async void TeamsUsernameHooksUidPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string uid = null;
            //var response = await instance.TeamsUsernameHooksUidPut(userAgent, username, uid);
            //Assert.IsInstanceOf<WebhookSubscription> (response, "response is WebhookSubscription");
        }
        
        /// <summary>
        /// Test TeamsUsernameMembersGet
        /// </summary>
        [Test]
        public async void TeamsUsernameMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.TeamsUsernameMembersGet(userAgent, username);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test TeamsUsernameRepositoriesGet
        /// </summary>
        [Test]
        public async void TeamsUsernameRepositoriesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.TeamsUsernameRepositoriesGet(userAgent, username);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test UsersUsernameMembersGet
        /// </summary>
        [Test]
        public async void UsersUsernameMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.UsersUsernameMembersGet(userAgent, username);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test UsersUsernameRepositoriesGet
        /// </summary>
        [Test]
        public async void UsersUsernameRepositoriesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.UsersUsernameRepositoriesGet(userAgent, username);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
    }

}
