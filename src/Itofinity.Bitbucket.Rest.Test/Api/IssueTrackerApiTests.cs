/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;
using Refit;

using Itofinity.Bitbucket.Rest.Client;
using Itofinity.Bitbucket.Rest.Api;
using Itofinity.Bitbucket.Rest.Model;

namespace Itofinity.Bitbucket.Rest.Test
{
    /// <summary>
    ///  Class for testing IssueTrackerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class IssueTrackerApiTests
    {
        private string hostUrl = "";
        private string userAgent = "Itofinity.Bitbucket.Rest.Test.IssueTrackerApiTests";

        private IIssueTrackerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = RestService.For<IIssueTrackerApi>(hostUrl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of IssueTrackerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' IssueTrackerApi
            //Assert.IsInstanceOfType(typeof(IssueTrackerApi), instance, "instance is a IssueTrackerApi");
        }

        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugComponentsComponentIdGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugComponentsComponentIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //int? component_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugComponentsComponentIdGet(userAgent, username, component_id, repo_slug);
            //Assert.IsInstanceOf<Component> (response, "response is Component");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugComponentsGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugComponentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugComponentsGet(userAgent, username, repo_slug);
            //Assert.IsInstanceOf<PaginatedComponents> (response, "response is PaginatedComponents");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesGet(userAgent, username, repo_slug);
            //Assert.IsInstanceOf<PaginatedIssues> (response, "response is PaginatedIssues");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //int? issue_id = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsGet(userAgent, username, repo_slug, issue_id);
            //Assert.IsInstanceOf<PaginatedIssueAttachments> (response, "response is PaginatedIssueAttachments");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPathDelete
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPathDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string path = null;
            //string issue_id = null;
            //string repo_slug = null;
            //instance.RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPathDelete(userAgent, username, path, issue_id, repo_slug);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPathGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPathGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string path = null;
            //string issue_id = null;
            //string repo_slug = null;
            //instance.RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPathGet(userAgent, username, path, issue_id, repo_slug);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //int? issue_id = null;
            //instance.RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPost(userAgent, username, repo_slug, issue_id);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdChangesChangeIdGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdChangesChangeIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string change_id = null;
            //string issue_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdChangesChangeIdGet(userAgent, username, change_id, issue_id, repo_slug);
            //Assert.IsInstanceOf<IssueChange> (response, "response is IssueChange");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdChangesGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdChangesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string issue_id = null;
            //string repo_slug = null;
            //string q = null;
            //string sort = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdChangesGet(userAgent, username, issue_id, repo_slug, q, sort);
            //Assert.IsInstanceOf<PaginatedLogEntries> (response, "response is PaginatedLogEntries");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdChangesPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdChangesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string issue_id = null;
            //string repo_slug = null;
            //IssueChange _body = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdChangesPost(userAgent, username, issue_id, repo_slug, _body);
            //Assert.IsInstanceOf<IssueChange> (response, "response is IssueChange");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdDelete
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string comment_id = null;
            //string username = null;
            //string repo_slug = null;
            //string issue_id = null;
            //IssueComment _body = null;
            //instance.RepositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdDelete(userAgent, comment_id, username, repo_slug, issue_id, _body);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string comment_id = null;
            //string username = null;
            //string repo_slug = null;
            //string issue_id = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdGet(userAgent, comment_id, username, repo_slug, issue_id);
            //Assert.IsInstanceOf<IssueComment> (response, "response is IssueComment");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdPut
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string comment_id = null;
            //string username = null;
            //string repo_slug = null;
            //string issue_id = null;
            //IssueComment _body = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdPut(userAgent, comment_id, username, repo_slug, issue_id, _body);
            //Assert.IsInstanceOf<IssueComment> (response, "response is IssueComment");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdCommentsGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdCommentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issue_id = null;
            //string username = null;
            //string repo_slug = null;
            //string q = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdCommentsGet(userAgent, issue_id, username, repo_slug, q);
            //Assert.IsInstanceOf<PaginatedIssueComments> (response, "response is PaginatedIssueComments");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdCommentsPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdCommentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issue_id = null;
            //string username = null;
            //string repo_slug = null;
            //IssueComment _body = null;
            //instance.RepositoriesUsernameRepoSlugIssuesIssueIdCommentsPost(userAgent, issue_id, username, repo_slug, _body);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdDelete
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string issue_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdDelete(userAgent, username, issue_id, repo_slug);
            //Assert.IsInstanceOf<Issue> (response, "response is Issue");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string issue_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdGet(userAgent, username, issue_id, repo_slug);
            //Assert.IsInstanceOf<Issue> (response, "response is Issue");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdPut
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string issue_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdPut(userAgent, username, issue_id, repo_slug);
            //Assert.IsInstanceOf<Issue> (response, "response is Issue");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdVoteDelete
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdVoteDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string issue_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdVoteDelete(userAgent, username, issue_id, repo_slug);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdVoteGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdVoteGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string issue_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdVoteGet(userAgent, username, issue_id, repo_slug);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdVotePut
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdVotePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string issue_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdVotePut(userAgent, username, issue_id, repo_slug);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdWatchDelete
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdWatchDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string issue_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdWatchDelete(userAgent, username, issue_id, repo_slug);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdWatchGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdWatchGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string issue_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdWatchGet(userAgent, username, issue_id, repo_slug);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesIssueIdWatchPut
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesIssueIdWatchPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string issue_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesIssueIdWatchPut(userAgent, username, issue_id, repo_slug);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugIssuesPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugIssuesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //Issue _body = null;
            //var response = await instance.RepositoriesUsernameRepoSlugIssuesPost(userAgent, username, repo_slug, _body);
            //Assert.IsInstanceOf<Issue> (response, "response is Issue");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugMilestonesGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugMilestonesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugMilestonesGet(userAgent, username, repo_slug);
            //Assert.IsInstanceOf<PaginatedMilestones> (response, "response is PaginatedMilestones");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugMilestonesMilestoneIdGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugMilestonesMilestoneIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //int? milestone_id = null;
            //var response = await instance.RepositoriesUsernameRepoSlugMilestonesMilestoneIdGet(userAgent, username, repo_slug, milestone_id);
            //Assert.IsInstanceOf<Milestone> (response, "response is Milestone");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugVersionsGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugVersionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugVersionsGet(userAgent, username, repo_slug);
            //Assert.IsInstanceOf<PaginatedVersions> (response, "response is PaginatedVersions");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugVersionsVersionIdGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugVersionsVersionIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //int? version_id = null;
            //var response = await instance.RepositoriesUsernameRepoSlugVersionsVersionIdGet(userAgent, username, repo_slug, version_id);
            //Assert.IsInstanceOf<ModelVersion> (response, "response is ModelVersion");
        }
        
    }

}
