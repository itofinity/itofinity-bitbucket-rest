/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;
using Refit;

using Itofinity.Bitbucket.Rest.Client;
using Itofinity.Bitbucket.Rest.Api;
using Itofinity.Bitbucket.Rest.Model;

namespace Itofinity.Bitbucket.Rest.Test
{
    /// <summary>
    ///  Class for testing RefsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RefsApiTests
    {
        private string hostUrl = "";
        private string userAgent = "Itofinity.Bitbucket.Rest.Test.RefsApiTests";

        private IRefsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = RestService.For<IRefsApi>(hostUrl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RefsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RefsApi
            //Assert.IsInstanceOfType(typeof(RefsApi), instance, "instance is a RefsApi");
        }

        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugRefsBranchesGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugRefsBranchesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string q = null;
            //string sort = null;
            //var response = await instance.RepositoriesUsernameRepoSlugRefsBranchesGet(userAgent, username, repo_slug, q, sort);
            //Assert.IsInstanceOf<PaginatedBranches> (response, "response is PaginatedBranches");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugRefsBranchesNameDelete
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugRefsBranchesNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string name = null;
            //string repo_slug = null;
            //instance.RepositoriesUsernameRepoSlugRefsBranchesNameDelete(userAgent, username, name, repo_slug);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugRefsBranchesNameGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugRefsBranchesNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string name = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugRefsBranchesNameGet(userAgent, username, name, repo_slug);
            //Assert.IsInstanceOf<Branch> (response, "response is Branch");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugRefsBranchesPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugRefsBranchesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugRefsBranchesPost(userAgent, username, repo_slug);
            //Assert.IsInstanceOf<Branch> (response, "response is Branch");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugRefsGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugRefsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string q = null;
            //string sort = null;
            //var response = await instance.RepositoriesUsernameRepoSlugRefsGet(userAgent, username, repo_slug, q, sort);
            //Assert.IsInstanceOf<PaginatedRefs> (response, "response is PaginatedRefs");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugRefsTagsGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugRefsTagsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string q = null;
            //string sort = null;
            //var response = await instance.RepositoriesUsernameRepoSlugRefsTagsGet(userAgent, username, repo_slug, q, sort);
            //Assert.IsInstanceOf<PaginatedTags> (response, "response is PaginatedTags");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugRefsTagsNameDelete
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugRefsTagsNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string name = null;
            //string repo_slug = null;
            //instance.RepositoriesUsernameRepoSlugRefsTagsNameDelete(userAgent, username, name, repo_slug);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugRefsTagsNameGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugRefsTagsNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string name = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugRefsTagsNameGet(userAgent, username, name, repo_slug);
            //Assert.IsInstanceOf<Tag> (response, "response is Tag");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugRefsTagsPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugRefsTagsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //Tag _body = null;
            //var response = await instance.RepositoriesUsernameRepoSlugRefsTagsPost(userAgent, username, repo_slug, _body);
            //Assert.IsInstanceOf<Tag> (response, "response is Tag");
        }
        
    }

}
