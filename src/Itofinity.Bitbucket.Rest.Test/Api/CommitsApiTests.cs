/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;
using Refit;

using Itofinity.Bitbucket.Rest.Client;
using Itofinity.Bitbucket.Rest.Api;
using Itofinity.Bitbucket.Rest.Model;

namespace Itofinity.Bitbucket.Rest.Test
{
    /// <summary>
    ///  Class for testing CommitsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CommitsApiTests
    {
        private string hostUrl = "";
        private string userAgent = "Itofinity.Bitbucket.Rest.Test.CommitsApiTests";

        private ICommitsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = RestService.For<ICommitsApi>(hostUrl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CommitsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CommitsApi
            //Assert.IsInstanceOfType(typeof(CommitsApi), instance, "instance is a CommitsApi");
        }

        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugCommitNodeApproveDelete
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugCommitNodeApproveDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string node = null;
            //string repo_slug = null;
            //instance.RepositoriesUsernameRepoSlugCommitNodeApproveDelete(userAgent, username, node, repo_slug);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugCommitNodeApprovePost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugCommitNodeApprovePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string node = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugCommitNodeApprovePost(userAgent, username, node, repo_slug);
            //Assert.IsInstanceOf<Participant> (response, "response is Participant");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugCommitNodeCommentsCommentIdGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugCommitNodeCommentsCommentIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string node = null;
            //int? comment_id = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugCommitNodeCommentsCommentIdGet(userAgent, username, node, comment_id, repo_slug);
            //Assert.IsInstanceOf<CommitComment> (response, "response is CommitComment");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugCommitNodeCommentsGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugCommitNodeCommentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string node = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugCommitNodeCommentsGet(userAgent, username, node, repo_slug);
            //Assert.IsInstanceOf<PaginatedCommitComments> (response, "response is PaginatedCommitComments");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugCommitNodeCommentsPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugCommitNodeCommentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string node = null;
            //string username = null;
            //string repo_slug = null;
            //CommitComment _body = null;
            //instance.RepositoriesUsernameRepoSlugCommitNodeCommentsPost(userAgent, node, username, repo_slug, _body);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugCommitNodeGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugCommitNodeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string node = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugCommitNodeGet(userAgent, username, node, repo_slug);
            //Assert.IsInstanceOf<Commit> (response, "response is Commit");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugCommitsGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugCommitsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugCommitsGet(userAgent, username, repo_slug);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugCommitsPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugCommitsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugCommitsPost(userAgent, username, repo_slug);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugCommitsRevisionGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugCommitsRevisionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string revision = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugCommitsRevisionGet(userAgent, username, revision, repo_slug);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugCommitsRevisionPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugCommitsRevisionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string revision = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugCommitsRevisionPost(userAgent, username, revision, repo_slug);
            //Assert.IsInstanceOf<Error> (response, "response is Error");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugDiffSpecGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugDiffSpecGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string spec = null;
            //string repo_slug = null;
            //int? context = null;
            //string path = null;
            //bool? ignore_whitespace = null;
            //bool? binary = null;
            //instance.RepositoriesUsernameRepoSlugDiffSpecGet(userAgent, username, spec, repo_slug, context, path, ignore_whitespace, binary);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugPatchSpecGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugPatchSpecGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string spec = null;
            //string repo_slug = null;
            //instance.RepositoriesUsernameRepoSlugPatchSpecGet(userAgent, username, spec, repo_slug);
            
        }
        
    }

}
