/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;
using Refit;

using Itofinity.Bitbucket.Rest.Client;
using Itofinity.Bitbucket.Rest.Api;
using Itofinity.Bitbucket.Rest.Model;

namespace Itofinity.Bitbucket.Rest.Test
{
    /// <summary>
    ///  Class for testing SourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SourceApiTests
    {
        private string hostUrl = "";
        private string userAgent = "Itofinity.Bitbucket.Rest.Test.SourceApiTests";

        private ISourceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = RestService.For<ISourceApi>(hostUrl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SourceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SourceApi
            //Assert.IsInstanceOfType(typeof(SourceApi), instance, "instance is a SourceApi");
        }

        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugFilehistoryNodePathGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugFilehistoryNodePathGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string node = null;
            //string path = null;
            //string repo_slug = null;
            //string renames = null;
            //string q = null;
            //string sort = null;
            //var response = await instance.RepositoriesUsernameRepoSlugFilehistoryNodePathGet(userAgent, username, node, path, repo_slug, renames, q, sort);
            //Assert.IsInstanceOf<PaginatedFiles> (response, "response is PaginatedFiles");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugSrcGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugSrcGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string format = null;
            //var response = await instance.RepositoriesUsernameRepoSlugSrcGet(userAgent, username, repo_slug, format);
            //Assert.IsInstanceOf<PaginatedTreeentries> (response, "response is PaginatedTreeentries");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugSrcNodePathGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugSrcNodePathGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string node = null;
            //string path = null;
            //string repo_slug = null;
            //string format = null;
            //string q = null;
            //string sort = null;
            //var response = await instance.RepositoriesUsernameRepoSlugSrcNodePathGet(userAgent, username, node, path, repo_slug, format, q, sort);
            //Assert.IsInstanceOf<PaginatedTreeentries> (response, "response is PaginatedTreeentries");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugSrcPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugSrcPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string message = null;
            //string author = null;
            //string parents = null;
            //string files = null;
            //string files2 = null;
            //string branch = null;
            //instance.RepositoriesUsernameRepoSlugSrcPost(userAgent, username, repo_slug, message, author, parents, files, files2, branch);
            
        }
        
    }

}
