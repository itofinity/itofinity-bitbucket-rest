/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;
using Refit;

using Itofinity.Bitbucket.Rest.Client;
using Itofinity.Bitbucket.Rest.Api;
using Itofinity.Bitbucket.Rest.Model;

namespace Itofinity.Bitbucket.Rest.Test
{
    /// <summary>
    ///  Class for testing SshApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SshApiTests
    {
        private string hostUrl = "";
        private string userAgent = "Itofinity.Bitbucket.Rest.Test.SshApiTests";

        private ISshApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = RestService.For<ISshApi>(hostUrl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SshApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SshApi
            //Assert.IsInstanceOfType(typeof(SshApi), instance, "instance is a SshApi");
        }

        
        /// <summary>
        /// Test UsersUsernameSshKeysDelete
        /// </summary>
        [Test]
        public async void UsersUsernameSshKeysDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string key_id = null;
            //instance.UsersUsernameSshKeysDelete(userAgent, username, key_id);
            
        }
        
        /// <summary>
        /// Test UsersUsernameSshKeysGet
        /// </summary>
        [Test]
        public async void UsersUsernameSshKeysGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string key_id = null;
            //var response = await instance.UsersUsernameSshKeysGet(userAgent, username, key_id);
            //Assert.IsInstanceOf<SshAccountKey> (response, "response is SshAccountKey");
        }
        
        /// <summary>
        /// Test UsersUsernameSshKeysGet_0
        /// </summary>
        [Test]
        public async void UsersUsernameSshKeysGet_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.UsersUsernameSshKeysGet_0(userAgent, username);
            //Assert.IsInstanceOf<PaginatedSshUserKeys> (response, "response is PaginatedSshUserKeys");
        }
        
        /// <summary>
        /// Test UsersUsernameSshKeysPost
        /// </summary>
        [Test]
        public async void UsersUsernameSshKeysPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //SshAccountKey _body = null;
            //var response = await instance.UsersUsernameSshKeysPost(userAgent, username, _body);
            //Assert.IsInstanceOf<SshAccountKey> (response, "response is SshAccountKey");
        }
        
        /// <summary>
        /// Test UsersUsernameSshKeysPut
        /// </summary>
        [Test]
        public async void UsersUsernameSshKeysPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string key_id = null;
            //SshAccountKey _body = null;
            //var response = await instance.UsersUsernameSshKeysPut(userAgent, username, key_id, _body);
            //Assert.IsInstanceOf<SshAccountKey> (response, "response is SshAccountKey");
        }
        
    }

}
