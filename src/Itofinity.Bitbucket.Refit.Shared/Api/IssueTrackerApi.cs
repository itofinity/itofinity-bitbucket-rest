/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Refit;
using Itofinity.Bitbucket.Refit.Client;
using Itofinity.Bitbucket.Refit.Model;

namespace Itofinity.Bitbucket.Refit.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssueTrackerApi
    {
        #region Asynchronous Operations

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the specified issue tracker component object.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="component_id">The component&#39;s id</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of Component</returns>
        [Get("/repositories/{username}/{repo_slug}/components/{component_id}")]
        System.Threading.Tasks.Task<Component> RepositoriesUsernameRepoSlugComponentsComponentIdGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("component_id")]int? component_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the components that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of PaginatedComponents</returns>
        [Get("/repositories/{username}/{repo_slug}/components")]
        System.Threading.Tasks.Task<PaginatedComponents> RepositoriesUsernameRepoSlugComponentsGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the issues in the issue tracker.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of PaginatedIssues</returns>
        [Get("/repositories/{username}/{repo_slug}/issues")]
        System.Threading.Tasks.Task<PaginatedIssues> RepositoriesUsernameRepoSlugIssuesGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all attachments for this issue.  This returns the files&#39; meta data. This does not return the files&#39; actual contents.  The files are always ordered by their upload date.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="repo_slug"></param>
        /// <param name="issue_id">The issue&#39;s id</param>
        /// <returns>Task of PaginatedIssueAttachments</returns>
        [Get("/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments")]
        System.Threading.Tasks.Task<PaginatedIssueAttachments> RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("issue_id")]int? issue_id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an attachment.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="path"></param>
        /// <param name="issue_id"></param>
        /// <param name="repo_slug"></param>
        /// <returns>Task of void</returns>
        [Delete("/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments/{path}")]
        System.Threading.Tasks.Task RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPathDelete([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("path")]string path, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contents of the specified file attachment.  Note that this endpoint does not return a JSON response, but instead returns a redirect pointing to the actual file that in turn will return the raw contents.  The redirect URL contains a one-time token that has a limited lifetime. As a result, the link should not be persisted, stored, or shared.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="path"></param>
        /// <param name="issue_id"></param>
        /// <param name="repo_slug"></param>
        /// <returns>Task of void</returns>
        [Get("/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments/{path}")]
        System.Threading.Tasks.Task RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPathGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("path")]string path, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload new issue attachments.  To upload files, perform a &#x60;multipart/form-data&#x60; POST containing one or more file fields.  When a file is uploaded with the same name as an existing attachment, then the existing file will be replaced.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="repo_slug"></param>
        /// <param name="issue_id">The issue&#39;s id</param>
        /// <returns>Task of void</returns>
        [Post("/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments")]
        System.Threading.Tasks.Task RepositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPost([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("issue_id")]int? issue_id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the specified issue change object.  This resource is only available on repositories that have the issue tracker enabled.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="change_id">The issue change id</param>
        /// <param name="issue_id">The issue id</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of IssueChange</returns>
        [Get("/repositories/{username}/{repo_slug}/issues/{issue_id}/changes/{change_id}")]
        System.Threading.Tasks.Task<IssueChange> RepositoriesUsernameRepoSlugIssuesIssueIdChangesChangeIdGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("change_id")]string change_id, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the list of all changes that have been made to the specified issue. Changes are returned in chronological order with the oldest change first.  Each time an issue is edited in the UI or through the API, an immutable change record is created under the &#x60;/issues/123/changes&#x60; endpoint. It also has a comment associated with the change.  &#x60;&#x60;&#x60; $ curl -s https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1/changes - | jq .  {   \&quot;pagelen\&quot;: 20,   \&quot;values\&quot;: [     {       \&quot;changes\&quot;: {         \&quot;priority\&quot;: {           \&quot;new\&quot;: \&quot;trivial\&quot;,           \&quot;old\&quot;: \&quot;major\&quot;         },         \&quot;assignee\&quot;: {           \&quot;new\&quot;: \&quot;\&quot;,           \&quot;old\&quot;: \&quot;evzijst\&quot;         },         \&quot;assignee_account_id\&quot;: {           \&quot;new\&quot;: \&quot;\&quot;,           \&quot;old\&quot;: \&quot;557058:c0b72ad0-1cb5-4018-9cdc-0cde8492c443\&quot;         },         \&quot;kind\&quot;: {           \&quot;new\&quot;: \&quot;enhancement\&quot;,           \&quot;old\&quot;: \&quot;bug\&quot;         }       },       \&quot;links\&quot;: {         \&quot;self\&quot;: {           \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1/changes/2\&quot;         },         \&quot;html\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/dogslow/issues/1#comment-2\&quot;         }       },       \&quot;issue\&quot;: {         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1\&quot;           }         },         \&quot;type\&quot;: \&quot;issue\&quot;,         \&quot;id\&quot;: 1,         \&quot;repository\&quot;: {           \&quot;links\&quot;: {             \&quot;self\&quot;: {               \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/evzijst/dogslow\&quot;             },             \&quot;html\&quot;: {               \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/dogslow\&quot;             },             \&quot;avatar\&quot;: {               \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/dogslow/avatar/32/\&quot;             }           },           \&quot;type\&quot;: \&quot;repository\&quot;,           \&quot;name\&quot;: \&quot;dogslow\&quot;,           \&quot;full_name\&quot;: \&quot;evzijst/dogslow\&quot;,           \&quot;uuid\&quot;: \&quot;{988b17c6-1a47-4e70-84ee-854d5f012bf6}\&quot;         },         \&quot;title\&quot;: \&quot;Updated title\&quot;       },       \&quot;created_on\&quot;: \&quot;2018-03-03T00:35:28.353630+00:00\&quot;,       \&quot;user\&quot;: {         \&quot;username\&quot;: \&quot;evzijst\&quot;,         \&quot;nickname\&quot;: \&quot;evzijst\&quot;,         \&quot;display_name\&quot;: \&quot;evzijst\&quot;,         \&quot;type\&quot;: \&quot;user\&quot;,         \&quot;uuid\&quot;: \&quot;{aaa7972b-38af-4fb1-802d-6e3854c95778}\&quot;,         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/evzijst\&quot;           },           \&quot;html\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/\&quot;           },           \&quot;avatar\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/account/evzijst/avatar/32/\&quot;           }         }       },       \&quot;message\&quot;: {         \&quot;raw\&quot;: \&quot;Removed assignee, changed kind and priority.\&quot;,         \&quot;markup\&quot;: \&quot;markdown\&quot;,         \&quot;html\&quot;: \&quot;&lt;p&gt;Removed assignee, changed kind and priority.&lt;/p&gt;\&quot;,         \&quot;type\&quot;: \&quot;rendered\&quot;       },       \&quot;type\&quot;: \&quot;issue_change\&quot;,       \&quot;id\&quot;: 2     }   ],   \&quot;page\&quot;: 1 } &#x60;&#x60;&#x60;  Changes support [filtering and sorting](../../../meta/filtering) that can be used to search for specific changes. For instance, to see when an issue transitioned to \&quot;resolved\&quot;:  &#x60;&#x60;&#x60; $ curl -s https://api.bitbucket.org/2.0/repositories/site/master/issues/1/changes \\    -G - -data-urlencode&#x3D;&#39;q&#x3D;changes.state.new &#x3D; \&quot;resolved\&quot;&#39; &#x60;&#x60;&#x60;  This resource is only available on repositories that have the issue tracker enabled.  N.B.  The &#x60;changes.assignee&#x60; and &#x60;changes.assignee_account_id&#x60; fields are not a &#x60;user&#x60; object. Instead, they contain the raw &#x60;username&#x60; and &#x60;account_id&#x60; of the user. This is to protect the integrity of the audit log even after a user account gets deleted.  The &#x60;changes.assignee&#x60; field is deprecated will disappear in the future. Use &#x60;changes.assignee_account_id&#x60; instead.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="issue_id">The issue id</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="q"> Query string to narrow down the response. See [filtering and sorting](../../../meta/filtering) for details. (optional)</param>
        /// <param name="sort"> Name of a response property to sort results. See [filtering and sorting](../../../meta/filtering#query-sort) for details.  (optional)</param>
        /// <returns>Task of PaginatedLogEntries</returns>
        [Get("/repositories/{username}/{repo_slug}/issues/{issue_id}/changes")]
        System.Threading.Tasks.Task<PaginatedLogEntries> RepositoriesUsernameRepoSlugIssuesIssueIdChangesGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug, [AliasAs("q")]string q = null, [AliasAs("sort")]string sort = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Makes a change to the specified issue.  For example, to change an issue&#39;s state and assignee, create a new change object that modifies these fields:  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/site/master/issues/1234/changes \\   -s -u evzijst -X POST -H \&quot;Content-Type: application/json\&quot; \\   -d &#39;{     \&quot;changes\&quot;: {       \&quot;assignee_account_id\&quot;: {         \&quot;new\&quot;: \&quot;557058:c0b72ad0-1cb5-4018-9cdc-0cde8492c443\&quot;       },       \&quot;state\&quot;: {         \&quot;new\&quot;: &#39;resolved\&quot;       }     }     \&quot;message\&quot;: {       \&quot;raw\&quot;: \&quot;This is now resolved.\&quot;     }   }&#39; &#x60;&#x60;&#x60;  The above example also includes a custom comment to go alongside the change. This comment will also be visible on the issue page in the UI.  The fields of the &#x60;changes&#x60; object are strings, not objects. This allows for immutable change log records, even after user accounts, milestones, or other objects recorded in a change entry, get renamed or deleted.  The &#x60;assignee_account_id&#x60; field stores the account id. When POSTing a new change and changing the assignee, the client should therefore use the user&#39;s account_id in the &#x60;changes.assignee_account_id.new&#x60; field.  This call requires authentication. Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate authorization.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="issue_id">The issue id</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="_body">The new issue state change. The only required elements are &#x60;changes.[].new&#x60;. All other elements can be omitted from the body.</param>
        /// <returns>Task of IssueChange</returns>
        [Post("/repositories/{username}/{repo_slug}/issues/{issue_id}/changes")]
        System.Threading.Tasks.Task<IssueChange> RepositoriesUsernameRepoSlugIssuesIssueIdChangesPost([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug, [Body]IssueChange _body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the specified comment.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comment_id"></param>
        /// <param name="username">This can either be the username or the UUID of the user, surrounded by curly-braces, for example: &#x60;{user UUID}&#x60;. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="issue_id">The ID of the issue that is being queried. </param>
        /// <param name="_body">The updated comment.</param>
        /// <returns>Task of void</returns>
        [Delete("/repositories/{username}/{repo_slug}/issues/{issue_id}/comments/{comment_id}")]
        System.Threading.Tasks.Task RepositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdDelete([Header("UserAgent")] string userAgent, [AliasAs("comment_id")]string comment_id, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("issue_id")]string issue_id, [Body]IssueComment _body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the specified issue comment object.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comment_id"></param>
        /// <param name="username">This can either be the username or the UUID of the user, surrounded by curly-braces, for example: &#x60;{user UUID}&#x60;. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="issue_id">The ID of the issue that is being queried. </param>
        /// <returns>Task of IssueComment</returns>
        [Get("/repositories/{username}/{repo_slug}/issues/{issue_id}/comments/{comment_id}")]
        System.Threading.Tasks.Task<IssueComment> RepositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdGet([Header("UserAgent")] string userAgent, [AliasAs("comment_id")]string comment_id, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("issue_id")]string issue_id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the content of the specified issue comment. Note that only the &#x60;content.raw&#x60; field can be modified.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/5728901 \\   -X PUT -u evzijst \\   -H &#39;Content-Type: application/json&#39; \\   -d &#39;{\&quot;content\&quot;: {\&quot;raw\&quot;: \&quot;Lorem ipsum.\&quot;}&#39; &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comment_id"></param>
        /// <param name="username">This can either be the username or the UUID of the user, surrounded by curly-braces, for example: &#x60;{user UUID}&#x60;. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="issue_id">The ID of the issue that is being queried. </param>
        /// <param name="_body">The updated comment.</param>
        /// <returns>Task of IssueComment</returns>
        [Put("/repositories/{username}/{repo_slug}/issues/{issue_id}/comments/{comment_id}")]
        System.Threading.Tasks.Task<IssueComment> RepositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdPut([Header("UserAgent")] string userAgent, [AliasAs("comment_id")]string comment_id, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("issue_id")]string issue_id, [Body]IssueComment _body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all comments that were made on the specified issue.  The default sorting is oldest to newest and can be overridden with the &#x60;sort&#x60; query parameter.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](../../../../../../meta/filtering) for more details.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issue_id"></param>
        /// <param name="username">This can either be the username or the UUID of the user, surrounded by curly-braces, for example: &#x60;{user UUID}&#x60;. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="q"> Query string to narrow down the response as per [filtering and sorting](../../../../../../meta/filtering). (optional)</param>
        /// <returns>Task of PaginatedIssueComments</returns>
        [Get("/repositories/{username}/{repo_slug}/issues/{issue_id}/comments")]
        System.Threading.Tasks.Task<PaginatedIssueComments> RepositoriesUsernameRepoSlugIssuesIssueIdCommentsGet([Header("UserAgent")] string userAgent, [AliasAs("issue_id")]string issue_id, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("q")]string q = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new issue comment.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/ \\   -X POST -u evzijst \\   -H &#39;Content-Type: application/json&#39; \\   -d &#39;{\&quot;content\&quot;: {\&quot;raw\&quot;: \&quot;Lorem ipsum.\&quot;}}&#39; &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issue_id"></param>
        /// <param name="username">This can either be the username or the UUID of the user, surrounded by curly-braces, for example: &#x60;{user UUID}&#x60;. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="_body">The new issue comment object.</param>
        /// <returns>Task of void</returns>
        [Post("/repositories/{username}/{repo_slug}/issues/{issue_id}/comments")]
        System.Threading.Tasks.Task RepositoriesUsernameRepoSlugIssuesIssueIdCommentsPost([Header("UserAgent")] string userAgent, [AliasAs("issue_id")]string issue_id, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [Body]IssueComment _body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the specified issue. This requires write access to the repository.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="issue_id">The issue id</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of Issue</returns>
        [Delete("/repositories/{username}/{repo_slug}/issues/{issue_id}")]
        System.Threading.Tasks.Task<Issue> RepositoriesUsernameRepoSlugIssuesIssueIdDelete([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the specified issue.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="issue_id">The issue id</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of Issue</returns>
        [Get("/repositories/{username}/{repo_slug}/issues/{issue_id}")]
        System.Threading.Tasks.Task<Issue> RepositoriesUsernameRepoSlugIssuesIssueIdGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Modifies the issue.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/repostories/evzijst/dogslow/issues/123 \\   -u evzijst -s -X PUT -H &#39;Content-Type: application/json&#39; \\   -d &#39;{   \&quot;title\&quot;: \&quot;Updated title\&quot;,   \&quot;assignee\&quot;: {     \&quot;username\&quot;: \&quot;evzijst\&quot;   },   \&quot;priority\&quot;: \&quot;minor\&quot;,   \&quot;version\&quot;: {     \&quot;name\&quot;: \&quot;1.0\&quot;   },   \&quot;component\&quot;: null }&#39; &#x60;&#x60;&#x60;  This example changes the &#x60;title&#x60;, &#x60;assignee&#x60;, &#x60;priority&#x60; and the &#x60;version&#x60;. It also removes the value of the &#x60;component&#x60; from the issue by setting the field to &#x60;null&#x60;. Any field not present keeps its existing value.  Each time an issue is edited in the UI or through the API, an immutable change record is created under the &#x60;/issues/123/changes&#x60; endpoint. It also has a comment associated with the change.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="issue_id">The issue id</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of Issue</returns>
        [Put("/repositories/{username}/{repo_slug}/issues/{issue_id}")]
        System.Threading.Tasks.Task<Issue> RepositoriesUsernameRepoSlugIssuesIssueIdPut([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retract your vote.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="issue_id">The issue id</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of Error</returns>
        [Delete("/repositories/{username}/{repo_slug}/issues/{issue_id}/vote")]
        System.Threading.Tasks.Task<Error> RepositoriesUsernameRepoSlugIssuesIssueIdVoteDelete([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check whether the authenticated user has voted for this issue. A 204 status code indicates that the user has voted, while a 404 implies they haven&#39;t.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="issue_id">The issue id</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of Error</returns>
        [Get("/repositories/{username}/{repo_slug}/issues/{issue_id}/vote")]
        System.Threading.Tasks.Task<Error> RepositoriesUsernameRepoSlugIssuesIssueIdVoteGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Vote for this issue.  To cast your vote, do an empty PUT. The 204 status code indicates that the operation was successful.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="issue_id">The issue id</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of Error</returns>
        [Put("/repositories/{username}/{repo_slug}/issues/{issue_id}/vote")]
        System.Threading.Tasks.Task<Error> RepositoriesUsernameRepoSlugIssuesIssueIdVotePut([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop watching this issue.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="issue_id">The issue id</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of Error</returns>
        [Delete("/repositories/{username}/{repo_slug}/issues/{issue_id}/watch")]
        System.Threading.Tasks.Task<Error> RepositoriesUsernameRepoSlugIssuesIssueIdWatchDelete([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Indicated whether or not the authenticated user is watching this issue.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="issue_id">The issue id</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of Error</returns>
        [Get("/repositories/{username}/{repo_slug}/issues/{issue_id}/watch")]
        System.Threading.Tasks.Task<Error> RepositoriesUsernameRepoSlugIssuesIssueIdWatchGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start watching this issue.  To start watching this issue, do an empty PUT. The 204 status code indicates that the operation was successful.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="issue_id">The issue id</param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of Error</returns>
        [Put("/repositories/{username}/{repo_slug}/issues/{issue_id}/watch")]
        System.Threading.Tasks.Task<Error> RepositoriesUsernameRepoSlugIssuesIssueIdWatchPut([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("issue_id")]string issue_id, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new issue.  This call requires authentication. Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate authorization.  The authenticated user is used for the issue&#39;s &#x60;reporter&#x60; field.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="_body">The new issue. The only required element is &#x60;title&#x60;. All other elements can be omitted from the body.</param>
        /// <returns>Task of Issue</returns>
        [Post("/repositories/{username}/{repo_slug}/issues")]
        System.Threading.Tasks.Task<Issue> RepositoriesUsernameRepoSlugIssuesPost([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [Body]Issue _body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the milestones that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of PaginatedMilestones</returns>
        [Get("/repositories/{username}/{repo_slug}/milestones")]
        System.Threading.Tasks.Task<PaginatedMilestones> RepositoriesUsernameRepoSlugMilestonesGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the specified issue tracker milestone object.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="milestone_id">The milestone&#39;s id</param>
        /// <returns>Task of Milestone</returns>
        [Get("/repositories/{username}/{repo_slug}/milestones/{milestone_id}")]
        System.Threading.Tasks.Task<Milestone> RepositoriesUsernameRepoSlugMilestonesMilestoneIdGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("milestone_id")]int? milestone_id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the versions that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <returns>Task of PaginatedVersions</returns>
        [Get("/repositories/{username}/{repo_slug}/versions")]
        System.Threading.Tasks.Task<PaginatedVersions> RepositoriesUsernameRepoSlugVersionsGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the specified issue tracker version object.
        /// </remarks>
        /// <exception cref="Itofinity.Bitbucket.Refit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">This can either be the username or the UUID of the account, surrounded by curly-braces, for example: &#x60;{account UUID}&#x60;. An account is either a team or user. </param>
        /// <param name="repo_slug">This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;. </param>
        /// <param name="version_id">The version&#39;s id</param>
        /// <returns>Task of ModelVersion</returns>
        [Get("/repositories/{username}/{repo_slug}/versions/{version_id}")]
        System.Threading.Tasks.Task<ModelVersion> RepositoriesUsernameRepoSlugVersionsVersionIdGet([Header("UserAgent")] string userAgent, [AliasAs("username")]string username, [AliasAs("repo_slug")]string repo_slug, [AliasAs("version_id")]int? version_id);
        #endregion Asynchronous Operations
    }
}
