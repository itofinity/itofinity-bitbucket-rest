/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Itofinity.Bitbucket.Refit.Model
{
    /// <summary>
    /// Issue
    /// </summary>
    [DataContract]
    public partial class Issue : ModelObject,  IEquatable<Issue>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum New for "new"
            /// </summary>
            [EnumMember(Value = "new")]
            New,
            
            /// <summary>
            /// Enum Open for "open"
            /// </summary>
            [EnumMember(Value = "open")]
            Open,
            
            /// <summary>
            /// Enum Resolved for "resolved"
            /// </summary>
            [EnumMember(Value = "resolved")]
            Resolved,
            
            /// <summary>
            /// Enum Onhold for "on hold"
            /// </summary>
            [EnumMember(Value = "on hold")]
            Onhold,
            
            /// <summary>
            /// Enum Invalid for "invalid"
            /// </summary>
            [EnumMember(Value = "invalid")]
            Invalid,
            
            /// <summary>
            /// Enum Duplicate for "duplicate"
            /// </summary>
            [EnumMember(Value = "duplicate")]
            Duplicate,
            
            /// <summary>
            /// Enum Wontfix for "wontfix"
            /// </summary>
            [EnumMember(Value = "wontfix")]
            Wontfix,
            
            /// <summary>
            /// Enum Closed for "closed"
            /// </summary>
            [EnumMember(Value = "closed")]
            Closed
        }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KindEnum
        {
            
            /// <summary>
            /// Enum Bug for "bug"
            /// </summary>
            [EnumMember(Value = "bug")]
            Bug,
            
            /// <summary>
            /// Enum Enhancement for "enhancement"
            /// </summary>
            [EnumMember(Value = "enhancement")]
            Enhancement,
            
            /// <summary>
            /// Enum Proposal for "proposal"
            /// </summary>
            [EnumMember(Value = "proposal")]
            Proposal,
            
            /// <summary>
            /// Enum Task for "task"
            /// </summary>
            [EnumMember(Value = "task")]
            Task
        }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            
            /// <summary>
            /// Enum Trivial for "trivial"
            /// </summary>
            [EnumMember(Value = "trivial")]
            Trivial,
            
            /// <summary>
            /// Enum Minor for "minor"
            /// </summary>
            [EnumMember(Value = "minor")]
            Minor,
            
            /// <summary>
            /// Enum Major for "major"
            /// </summary>
            [EnumMember(Value = "major")]
            Major,
            
            /// <summary>
            /// Enum Critical for "critical"
            /// </summary>
            [EnumMember(Value = "critical")]
            Critical,
            
            /// <summary>
            /// Enum Blocker for "blocker"
            /// </summary>
            [EnumMember(Value = "blocker")]
            Blocker
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public KindEnum? Kind { get; set; }
        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Issue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Issue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Issue" /> class.
        /// </summary>
        /// <param name="Type">Type (required).</param>
        /// <param name="Links">Links.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Repository">Repository.</param>
        /// <param name="Title">Title.</param>
        /// <param name="Reporter">Reporter.</param>
        /// <param name="Assignee">Assignee.</param>
        /// <param name="CreatedOn">CreatedOn.</param>
        /// <param name="UpdatedOn">UpdatedOn.</param>
        /// <param name="EditedOn">EditedOn.</param>
        /// <param name="State">State.</param>
        /// <param name="Kind">Kind.</param>
        /// <param name="Priority">Priority.</param>
        /// <param name="Milestone">Milestone.</param>
        /// <param name="_Version">_Version.</param>
        /// <param name="Component">Component.</param>
        /// <param name="Votes">Votes.</param>
        /// <param name="Content">Content.</param>
        public Issue(string Type = default(string), IssueLinks Links = default(IssueLinks), int? Id = default(int?), Repository Repository = default(Repository), string Title = default(string), User Reporter = default(User), User Assignee = default(User), DateTime? CreatedOn = default(DateTime?), DateTime? UpdatedOn = default(DateTime?), DateTime? EditedOn = default(DateTime?), StateEnum? State = default(StateEnum?), KindEnum? Kind = default(KindEnum?), PriorityEnum? Priority = default(PriorityEnum?), Milestone Milestone = default(Milestone), ModelVersion _Version = default(ModelVersion), Component Component = default(Component), int? Votes = default(int?), CommentContent Content = default(CommentContent))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for Issue and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.Links = Links;
            this.Id = Id;
            this.Repository = Repository;
            this.Title = Title;
            this.Reporter = Reporter;
            this.Assignee = Assignee;
            this.CreatedOn = CreatedOn;
            this.UpdatedOn = UpdatedOn;
            this.EditedOn = EditedOn;
            this.State = State;
            this.Kind = Kind;
            this.Priority = Priority;
            this.Milestone = Milestone;
            this._Version = _Version;
            this.Component = Component;
            this.Votes = Votes;
            this.Content = Content;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public IssueLinks Links { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Repository
        /// </summary>
        [DataMember(Name="repository", EmitDefaultValue=false)]
        public Repository Repository { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets Reporter
        /// </summary>
        [DataMember(Name="reporter", EmitDefaultValue=false)]
        public User Reporter { get; set; }
        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name="assignee", EmitDefaultValue=false)]
        public User Assignee { get; set; }
        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="created_on", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedOn
        /// </summary>
        [DataMember(Name="updated_on", EmitDefaultValue=false)]
        public DateTime? UpdatedOn { get; set; }
        /// <summary>
        /// Gets or Sets EditedOn
        /// </summary>
        [DataMember(Name="edited_on", EmitDefaultValue=false)]
        public DateTime? EditedOn { get; set; }
        /// <summary>
        /// Gets or Sets Milestone
        /// </summary>
        [DataMember(Name="milestone", EmitDefaultValue=false)]
        public Milestone Milestone { get; set; }
        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public ModelVersion _Version { get; set; }
        /// <summary>
        /// Gets or Sets Component
        /// </summary>
        [DataMember(Name="component", EmitDefaultValue=false)]
        public Component Component { get; set; }
        /// <summary>
        /// Gets or Sets Votes
        /// </summary>
        [DataMember(Name="votes", EmitDefaultValue=false)]
        public int? Votes { get; set; }
        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public CommentContent Content { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Issue {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Reporter: ").Append(Reporter).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("  EditedOn: ").Append(EditedOn).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Milestone: ").Append(Milestone).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Votes: ").Append(Votes).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Issue);
        }

        /// <summary>
        /// Returns true if Issue instances are equal
        /// </summary>
        /// <param name="other">Instance of Issue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Issue other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Repository == other.Repository ||
                    this.Repository != null &&
                    this.Repository.Equals(other.Repository)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Reporter == other.Reporter ||
                    this.Reporter != null &&
                    this.Reporter.Equals(other.Reporter)
                ) && 
                (
                    this.Assignee == other.Assignee ||
                    this.Assignee != null &&
                    this.Assignee.Equals(other.Assignee)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.UpdatedOn == other.UpdatedOn ||
                    this.UpdatedOn != null &&
                    this.UpdatedOn.Equals(other.UpdatedOn)
                ) && 
                (
                    this.EditedOn == other.EditedOn ||
                    this.EditedOn != null &&
                    this.EditedOn.Equals(other.EditedOn)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Kind == other.Kind ||
                    this.Kind != null &&
                    this.Kind.Equals(other.Kind)
                ) && 
                (
                    this.Priority == other.Priority ||
                    this.Priority != null &&
                    this.Priority.Equals(other.Priority)
                ) && 
                (
                    this.Milestone == other.Milestone ||
                    this.Milestone != null &&
                    this.Milestone.Equals(other.Milestone)
                ) && 
                (
                    this._Version == other._Version ||
                    this._Version != null &&
                    this._Version.Equals(other._Version)
                ) && 
                (
                    this.Component == other.Component ||
                    this.Component != null &&
                    this.Component.Equals(other.Component)
                ) && 
                (
                    this.Votes == other.Votes ||
                    this.Votes != null &&
                    this.Votes.Equals(other.Votes)
                ) && 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Repository != null)
                    hash = hash * 59 + this.Repository.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Reporter != null)
                    hash = hash * 59 + this.Reporter.GetHashCode();
                if (this.Assignee != null)
                    hash = hash * 59 + this.Assignee.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.UpdatedOn != null)
                    hash = hash * 59 + this.UpdatedOn.GetHashCode();
                if (this.EditedOn != null)
                    hash = hash * 59 + this.EditedOn.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Kind != null)
                    hash = hash * 59 + this.Kind.GetHashCode();
                if (this.Priority != null)
                    hash = hash * 59 + this.Priority.GetHashCode();
                if (this.Milestone != null)
                    hash = hash * 59 + this.Milestone.GetHashCode();
                if (this._Version != null)
                    hash = hash * 59 + this._Version.GetHashCode();
                if (this.Component != null)
                    hash = hash * 59 + this.Component.GetHashCode();
                if (this.Votes != null)
                    hash = hash * 59 + this.Votes.GetHashCode();
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
