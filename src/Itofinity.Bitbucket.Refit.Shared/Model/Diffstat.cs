/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Itofinity.Bitbucket.Refit.Model
{
    /// <summary>
    /// A diffstat object that includes a summary of changes made to a file between two commits.
    /// </summary>
    [DataContract]
    public partial class Diffstat :  IEquatable<Diffstat>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Added for "added"
            /// </summary>
            [EnumMember(Value = "added")]
            Added,
            
            /// <summary>
            /// Enum Removed for "removed"
            /// </summary>
            [EnumMember(Value = "removed")]
            Removed,
            
            /// <summary>
            /// Enum Modified for "modified"
            /// </summary>
            [EnumMember(Value = "modified")]
            Modified,
            
            /// <summary>
            /// Enum Renamed for "renamed"
            /// </summary>
            [EnumMember(Value = "renamed")]
            Renamed
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Diffstat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Diffstat() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Diffstat" /> class.
        /// </summary>
        /// <param name="Type">Type (required).</param>
        /// <param name="Status">Status.</param>
        /// <param name="LinesAdded">LinesAdded.</param>
        /// <param name="LinesRemoved">LinesRemoved.</param>
        /// <param name="Old">Old.</param>
        /// <param name="_New">_New.</param>
        public Diffstat(string Type = default(string), StatusEnum? Status = default(StatusEnum?), int? LinesAdded = default(int?), int? LinesRemoved = default(int?), CommitFile Old = default(CommitFile), CommitFile _New = default(CommitFile))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for Diffstat and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.Status = Status;
            this.LinesAdded = LinesAdded;
            this.LinesRemoved = LinesRemoved;
            this.Old = Old;
            this._New = _New;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets LinesAdded
        /// </summary>
        [DataMember(Name="lines_added", EmitDefaultValue=false)]
        public int? LinesAdded { get; set; }
        /// <summary>
        /// Gets or Sets LinesRemoved
        /// </summary>
        [DataMember(Name="lines_removed", EmitDefaultValue=false)]
        public int? LinesRemoved { get; set; }
        /// <summary>
        /// Gets or Sets Old
        /// </summary>
        [DataMember(Name="old", EmitDefaultValue=false)]
        public CommitFile Old { get; set; }
        /// <summary>
        /// Gets or Sets _New
        /// </summary>
        [DataMember(Name="new", EmitDefaultValue=false)]
        public CommitFile _New { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Diffstat {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LinesAdded: ").Append(LinesAdded).Append("\n");
            sb.Append("  LinesRemoved: ").Append(LinesRemoved).Append("\n");
            sb.Append("  Old: ").Append(Old).Append("\n");
            sb.Append("  _New: ").Append(_New).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Diffstat);
        }

        /// <summary>
        /// Returns true if Diffstat instances are equal
        /// </summary>
        /// <param name="other">Instance of Diffstat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Diffstat other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.LinesAdded == other.LinesAdded ||
                    this.LinesAdded != null &&
                    this.LinesAdded.Equals(other.LinesAdded)
                ) && 
                (
                    this.LinesRemoved == other.LinesRemoved ||
                    this.LinesRemoved != null &&
                    this.LinesRemoved.Equals(other.LinesRemoved)
                ) && 
                (
                    this.Old == other.Old ||
                    this.Old != null &&
                    this.Old.Equals(other.Old)
                ) && 
                (
                    this._New == other._New ||
                    this._New != null &&
                    this._New.Equals(other._New)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.LinesAdded != null)
                    hash = hash * 59 + this.LinesAdded.GetHashCode();
                if (this.LinesRemoved != null)
                    hash = hash * 59 + this.LinesRemoved.GetHashCode();
                if (this.Old != null)
                    hash = hash * 59 + this.Old.GetHashCode();
                if (this._New != null)
                    hash = hash * 59 + this._New.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
