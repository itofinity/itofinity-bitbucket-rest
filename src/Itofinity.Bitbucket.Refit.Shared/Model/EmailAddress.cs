/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Itofinity.Bitbucket.Refit.Model
{
    /// <summary>
    /// An email address object.
    /// </summary>
    [DataContract]
    public partial class EmailAddress :  IEquatable<EmailAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAddress" /> class.
        /// </summary>
        /// <param name="Type">Type (required).</param>
        /// <param name="IsPrimary">IsPrimary.</param>
        /// <param name="IsConfirmed">IsConfirmed.</param>
        /// <param name="Email">Email.</param>
        /// <param name="Links">Links.</param>
        public EmailAddress(string Type = default(string), bool? IsPrimary = default(bool?), bool? IsConfirmed = default(bool?), string Email = default(string), EmailAddressLinks Links = default(EmailAddressLinks))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for EmailAddress and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.IsPrimary = IsPrimary;
            this.IsConfirmed = IsConfirmed;
            this.Email = Email;
            this.Links = Links;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets IsPrimary
        /// </summary>
        [DataMember(Name="is_primary", EmitDefaultValue=false)]
        public bool? IsPrimary { get; set; }
        /// <summary>
        /// Gets or Sets IsConfirmed
        /// </summary>
        [DataMember(Name="is_confirmed", EmitDefaultValue=false)]
        public bool? IsConfirmed { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public EmailAddressLinks Links { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailAddress {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  IsConfirmed: ").Append(IsConfirmed).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EmailAddress);
        }

        /// <summary>
        /// Returns true if EmailAddress instances are equal
        /// </summary>
        /// <param name="other">Instance of EmailAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailAddress other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.IsPrimary == other.IsPrimary ||
                    this.IsPrimary != null &&
                    this.IsPrimary.Equals(other.IsPrimary)
                ) && 
                (
                    this.IsConfirmed == other.IsConfirmed ||
                    this.IsConfirmed != null &&
                    this.IsConfirmed.Equals(other.IsConfirmed)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.IsPrimary != null)
                    hash = hash * 59 + this.IsPrimary.GetHashCode();
                if (this.IsConfirmed != null)
                    hash = hash * 59 + this.IsConfirmed.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
