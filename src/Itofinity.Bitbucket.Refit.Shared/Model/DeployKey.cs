/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Itofinity.Bitbucket.Refit.Model
{
    /// <summary>
    /// DeployKey
    /// </summary>
    [DataContract]
    public partial class DeployKey : ModelObject,  IEquatable<DeployKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeployKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeployKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeployKey" /> class.
        /// </summary>
        /// <param name="Type">Type (required).</param>
        /// <param name="Key">The deploy key value..</param>
        /// <param name="Repository">The repository the deploy key is linked to.</param>
        /// <param name="Comment">The comment parsed from the deploy key (if present).</param>
        /// <param name="Label">The user-defined label for the deploy key.</param>
        /// <param name="AddedOn">AddedOn.</param>
        /// <param name="LastUsed">LastUsed.</param>
        /// <param name="Links">Links.</param>
        /// <param name="Owner">Owner.</param>
        public DeployKey(string Type = default(string), string Key = default(string), string Repository = default(string), string Comment = default(string), string Label = default(string), DateTime? AddedOn = default(DateTime?), DateTime? LastUsed = default(DateTime?), EmailAddressLinks Links = default(EmailAddressLinks), Account Owner = default(Account))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for DeployKey and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.Key = Key;
            this.Repository = Repository;
            this.Comment = Comment;
            this.Label = Label;
            this.AddedOn = AddedOn;
            this.LastUsed = LastUsed;
            this.Links = Links;
            this.Owner = Owner;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// The deploy key value.
        /// </summary>
        /// <value>The deploy key value.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// The repository the deploy key is linked to
        /// </summary>
        /// <value>The repository the deploy key is linked to</value>
        [DataMember(Name="repository", EmitDefaultValue=false)]
        public string Repository { get; set; }
        /// <summary>
        /// The comment parsed from the deploy key (if present)
        /// </summary>
        /// <value>The comment parsed from the deploy key (if present)</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }
        /// <summary>
        /// The user-defined label for the deploy key
        /// </summary>
        /// <value>The user-defined label for the deploy key</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }
        /// <summary>
        /// Gets or Sets AddedOn
        /// </summary>
        [DataMember(Name="added_on", EmitDefaultValue=false)]
        public DateTime? AddedOn { get; set; }
        /// <summary>
        /// Gets or Sets LastUsed
        /// </summary>
        [DataMember(Name="last_used", EmitDefaultValue=false)]
        public DateTime? LastUsed { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public EmailAddressLinks Links { get; set; }
        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public Account Owner { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeployKey {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  AddedOn: ").Append(AddedOn).Append("\n");
            sb.Append("  LastUsed: ").Append(LastUsed).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeployKey);
        }

        /// <summary>
        /// Returns true if DeployKey instances are equal
        /// </summary>
        /// <param name="other">Instance of DeployKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeployKey other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.Repository == other.Repository ||
                    this.Repository != null &&
                    this.Repository.Equals(other.Repository)
                ) && 
                (
                    this.Comment == other.Comment ||
                    this.Comment != null &&
                    this.Comment.Equals(other.Comment)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.AddedOn == other.AddedOn ||
                    this.AddedOn != null &&
                    this.AddedOn.Equals(other.AddedOn)
                ) && 
                (
                    this.LastUsed == other.LastUsed ||
                    this.LastUsed != null &&
                    this.LastUsed.Equals(other.LastUsed)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.Owner == other.Owner ||
                    this.Owner != null &&
                    this.Owner.Equals(other.Owner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.Repository != null)
                    hash = hash * 59 + this.Repository.GetHashCode();
                if (this.Comment != null)
                    hash = hash * 59 + this.Comment.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.AddedOn != null)
                    hash = hash * 59 + this.AddedOn.GetHashCode();
                if (this.LastUsed != null)
                    hash = hash * 59 + this.LastUsed.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.Owner != null)
                    hash = hash * 59 + this.Owner.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
