/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;
using Refit;

using Itofinity.Bitbucket.Refit.Client;
using Itofinity.Bitbucket.Refit.Api;
using Itofinity.Bitbucket.Refit.Model;

namespace Itofinity.Bitbucket.Refit.Test
{
    /// <summary>
    ///  Class for testing WebhooksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WebhooksApiTests
    {
        private string hostUrl = "";
        private string userAgent = "Itofinity.Bitbucket.Refit.Test.WebhooksApiTests";

        private IWebhooksApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = RestService.For<IWebhooksApi>(hostUrl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WebhooksApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WebhooksApi
            //Assert.IsInstanceOfType(typeof(WebhooksApi), instance, "instance is a WebhooksApi");
        }

        
        /// <summary>
        /// Test HookEventsGet
        /// </summary>
        [Test]
        public async void HookEventsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = await instance.HookEventsGet(userAgent);
            //Assert.IsInstanceOf<SubjectTypes> (response, "response is SubjectTypes");
        }
        
        /// <summary>
        /// Test HookEventsSubjectTypeGet
        /// </summary>
        [Test]
        public async void HookEventsSubjectTypeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subject_type = null;
            //var response = await instance.HookEventsSubjectTypeGet(userAgent, subject_type);
            //Assert.IsInstanceOf<PaginatedHookEvents> (response, "response is PaginatedHookEvents");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugHooksGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugHooksGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugHooksGet(userAgent, username, repo_slug);
            //Assert.IsInstanceOf<PaginatedWebhookSubscriptions> (response, "response is PaginatedWebhookSubscriptions");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugHooksPost
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugHooksPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //var response = await instance.RepositoriesUsernameRepoSlugHooksPost(userAgent, username, repo_slug);
            //Assert.IsInstanceOf<WebhookSubscription> (response, "response is WebhookSubscription");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugHooksUidDelete
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugHooksUidDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string uid = null;
            //instance.RepositoriesUsernameRepoSlugHooksUidDelete(userAgent, username, repo_slug, uid);
            
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugHooksUidGet
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugHooksUidGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string uid = null;
            //var response = await instance.RepositoriesUsernameRepoSlugHooksUidGet(userAgent, username, repo_slug, uid);
            //Assert.IsInstanceOf<WebhookSubscription> (response, "response is WebhookSubscription");
        }
        
        /// <summary>
        /// Test RepositoriesUsernameRepoSlugHooksUidPut
        /// </summary>
        [Test]
        public async void RepositoriesUsernameRepoSlugHooksUidPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string repo_slug = null;
            //string uid = null;
            //var response = await instance.RepositoriesUsernameRepoSlugHooksUidPut(userAgent, username, repo_slug, uid);
            //Assert.IsInstanceOf<WebhookSubscription> (response, "response is WebhookSubscription");
        }
        
        /// <summary>
        /// Test TeamsUsernameHooksGet
        /// </summary>
        [Test]
        public async void TeamsUsernameHooksGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.TeamsUsernameHooksGet(userAgent, username);
            //Assert.IsInstanceOf<PaginatedWebhookSubscriptions> (response, "response is PaginatedWebhookSubscriptions");
        }
        
        /// <summary>
        /// Test TeamsUsernameHooksPost
        /// </summary>
        [Test]
        public async void TeamsUsernameHooksPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.TeamsUsernameHooksPost(userAgent, username);
            //Assert.IsInstanceOf<WebhookSubscription> (response, "response is WebhookSubscription");
        }
        
        /// <summary>
        /// Test TeamsUsernameHooksUidDelete
        /// </summary>
        [Test]
        public async void TeamsUsernameHooksUidDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string uid = null;
            //instance.TeamsUsernameHooksUidDelete(userAgent, username, uid);
            
        }
        
        /// <summary>
        /// Test TeamsUsernameHooksUidGet
        /// </summary>
        [Test]
        public async void TeamsUsernameHooksUidGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string uid = null;
            //var response = await instance.TeamsUsernameHooksUidGet(userAgent, username, uid);
            //Assert.IsInstanceOf<WebhookSubscription> (response, "response is WebhookSubscription");
        }
        
        /// <summary>
        /// Test TeamsUsernameHooksUidPut
        /// </summary>
        [Test]
        public async void TeamsUsernameHooksUidPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string uid = null;
            //var response = await instance.TeamsUsernameHooksUidPut(userAgent, username, uid);
            //Assert.IsInstanceOf<WebhookSubscription> (response, "response is WebhookSubscription");
        }
        
        /// <summary>
        /// Test UsersUsernameHooksGet
        /// </summary>
        [Test]
        public async void UsersUsernameHooksGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.UsersUsernameHooksGet(userAgent, username);
            //Assert.IsInstanceOf<PaginatedWebhookSubscriptions> (response, "response is PaginatedWebhookSubscriptions");
        }
        
        /// <summary>
        /// Test UsersUsernameHooksPost
        /// </summary>
        [Test]
        public async void UsersUsernameHooksPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.UsersUsernameHooksPost(userAgent, username);
            //Assert.IsInstanceOf<WebhookSubscription> (response, "response is WebhookSubscription");
        }
        
        /// <summary>
        /// Test UsersUsernameHooksUidDelete
        /// </summary>
        [Test]
        public async void UsersUsernameHooksUidDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string uid = null;
            //instance.UsersUsernameHooksUidDelete(userAgent, username, uid);
            
        }
        
        /// <summary>
        /// Test UsersUsernameHooksUidGet
        /// </summary>
        [Test]
        public async void UsersUsernameHooksUidGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string uid = null;
            //var response = await instance.UsersUsernameHooksUidGet(userAgent, username, uid);
            //Assert.IsInstanceOf<WebhookSubscription> (response, "response is WebhookSubscription");
        }
        
        /// <summary>
        /// Test UsersUsernameHooksUidPut
        /// </summary>
        [Test]
        public async void UsersUsernameHooksUidPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string uid = null;
            //var response = await instance.UsersUsernameHooksUidPut(userAgent, username, uid);
            //Assert.IsInstanceOf<WebhookSubscription> (response, "response is WebhookSubscription");
        }
        
    }

}
