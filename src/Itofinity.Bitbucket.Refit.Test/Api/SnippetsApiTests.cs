/* 
 * Bitbucket API
 *
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;
using Refit;

using Itofinity.Bitbucket.Refit.Client;
using Itofinity.Bitbucket.Refit.Api;
using Itofinity.Bitbucket.Refit.Model;

namespace Itofinity.Bitbucket.Refit.Test
{
    /// <summary>
    ///  Class for testing SnippetsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SnippetsApiTests
    {
        private string hostUrl = "";
        private string userAgent = "Itofinity.Bitbucket.Refit.Test.SnippetsApiTests";

        private ISnippetsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = RestService.For<ISnippetsApi>(hostUrl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SnippetsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SnippetsApi
            //Assert.IsInstanceOfType(typeof(SnippetsApi), instance, "instance is a SnippetsApi");
        }

        
        /// <summary>
        /// Test SnippetsGet
        /// </summary>
        [Test]
        public async void SnippetsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //var response = await instance.SnippetsGet(userAgent, role);
            //Assert.IsInstanceOf<PaginatedSnippets> (response, "response is PaginatedSnippets");
        }
        
        /// <summary>
        /// Test SnippetsPost
        /// </summary>
        [Test]
        public async void SnippetsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Snippet _body = null;
            //var response = await instance.SnippetsPost(userAgent, _body);
            //Assert.IsInstanceOf<Snippet> (response, "response is Snippet");
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdCommentsCommentIdDelete
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdCommentsCommentIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string comment_id = null;
            //string encoded_id = null;
            //instance.SnippetsUsernameEncodedIdCommentsCommentIdDelete(userAgent, username, comment_id, encoded_id);
            
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdCommentsCommentIdGet
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdCommentsCommentIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string comment_id = null;
            //string encoded_id = null;
            //var response = await instance.SnippetsUsernameEncodedIdCommentsCommentIdGet(userAgent, username, comment_id, encoded_id);
            //Assert.IsInstanceOf<SnippetComment> (response, "response is SnippetComment");
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdCommentsCommentIdPut
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdCommentsCommentIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string comment_id = null;
            //string encoded_id = null;
            //instance.SnippetsUsernameEncodedIdCommentsCommentIdPut(userAgent, username, comment_id, encoded_id);
            
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdCommentsGet
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdCommentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //var response = await instance.SnippetsUsernameEncodedIdCommentsGet(userAgent, username, encoded_id);
            //Assert.IsInstanceOf<PaginatedSnippetComments> (response, "response is PaginatedSnippetComments");
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdCommentsPost
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdCommentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //Snippet _body = null;
            //var response = await instance.SnippetsUsernameEncodedIdCommentsPost(userAgent, username, encoded_id, _body);
            //Assert.IsInstanceOf<Snippet> (response, "response is Snippet");
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdCommitsGet
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdCommitsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //var response = await instance.SnippetsUsernameEncodedIdCommitsGet(userAgent, username, encoded_id);
            //Assert.IsInstanceOf<PaginatedSnippetCommit> (response, "response is PaginatedSnippetCommit");
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdCommitsRevisionGet
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdCommitsRevisionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //string revision = null;
            //var response = await instance.SnippetsUsernameEncodedIdCommitsRevisionGet(userAgent, username, encoded_id, revision);
            //Assert.IsInstanceOf<SnippetCommit> (response, "response is SnippetCommit");
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdDelete
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //instance.SnippetsUsernameEncodedIdDelete(userAgent, username, encoded_id);
            
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdGet
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //var response = await instance.SnippetsUsernameEncodedIdGet(userAgent, username, encoded_id);
            //Assert.IsInstanceOf<Snippet> (response, "response is Snippet");
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdNodeIdDelete
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdNodeIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string node_id = null;
            //string encoded_id = null;
            //instance.SnippetsUsernameEncodedIdNodeIdDelete(userAgent, username, node_id, encoded_id);
            
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdNodeIdFilesPathGet
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdNodeIdFilesPathGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string path = null;
            //string node_id = null;
            //string encoded_id = null;
            //instance.SnippetsUsernameEncodedIdNodeIdFilesPathGet(userAgent, username, path, node_id, encoded_id);
            
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdNodeIdGet
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdNodeIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //string node_id = null;
            //var response = await instance.SnippetsUsernameEncodedIdNodeIdGet(userAgent, username, encoded_id, node_id);
            //Assert.IsInstanceOf<Snippet> (response, "response is Snippet");
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdNodeIdPut
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdNodeIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //string node_id = null;
            //var response = await instance.SnippetsUsernameEncodedIdNodeIdPut(userAgent, username, encoded_id, node_id);
            //Assert.IsInstanceOf<Snippet> (response, "response is Snippet");
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdPut
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //var response = await instance.SnippetsUsernameEncodedIdPut(userAgent, username, encoded_id);
            //Assert.IsInstanceOf<Snippet> (response, "response is Snippet");
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdRevisionDiffGet
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdRevisionDiffGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //string revision = null;
            //string path = null;
            //instance.SnippetsUsernameEncodedIdRevisionDiffGet(userAgent, username, encoded_id, revision, path);
            
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdRevisionPatchGet
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdRevisionPatchGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //string revision = null;
            //instance.SnippetsUsernameEncodedIdRevisionPatchGet(userAgent, username, encoded_id, revision);
            
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdWatchDelete
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdWatchDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //var response = await instance.SnippetsUsernameEncodedIdWatchDelete(userAgent, username, encoded_id);
            //Assert.IsInstanceOf<PaginatedUsers> (response, "response is PaginatedUsers");
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdWatchGet
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdWatchGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //var response = await instance.SnippetsUsernameEncodedIdWatchGet(userAgent, username, encoded_id);
            //Assert.IsInstanceOf<PaginatedUsers> (response, "response is PaginatedUsers");
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdWatchPut
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdWatchPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //var response = await instance.SnippetsUsernameEncodedIdWatchPut(userAgent, username, encoded_id);
            //Assert.IsInstanceOf<PaginatedUsers> (response, "response is PaginatedUsers");
        }
        
        /// <summary>
        /// Test SnippetsUsernameEncodedIdWatchersGet
        /// </summary>
        [Test]
        public async void SnippetsUsernameEncodedIdWatchersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string encoded_id = null;
            //var response = await instance.SnippetsUsernameEncodedIdWatchersGet(userAgent, username, encoded_id);
            //Assert.IsInstanceOf<PaginatedUsers> (response, "response is PaginatedUsers");
        }
        
        /// <summary>
        /// Test SnippetsUsernameGet
        /// </summary>
        [Test]
        public async void SnippetsUsernameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string role = null;
            //var response = await instance.SnippetsUsernameGet(userAgent, username, role);
            //Assert.IsInstanceOf<PaginatedSnippets> (response, "response is PaginatedSnippets");
        }
        
        /// <summary>
        /// Test SnippetsUsernamePost
        /// </summary>
        [Test]
        public async void SnippetsUsernamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //Snippet _body = null;
            //var response = await instance.SnippetsUsernamePost(userAgent, username, _body);
            //Assert.IsInstanceOf<Snippet> (response, "response is Snippet");
        }
        
    }

}
